<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Newsletter</name>
    </assembly>
    <members>
        <member name="T:CMS.Newsletter.NewsletterSubscriptionAction">
            <summary>
            Class for subscribe/unsubscribe contact to newsletter
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterSubscriptionAction.Execute">
            <summary>
            Executes current action
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterSubscriptionAction.NewsletterName">
            <summary>
            Newsletter identifier.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterSubscriptionAction.Action">
            <summary>
            Gets current action - 0 for SUBSCRIBE, 1 for UNSUBSCRIBE contact.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.EmailQueueItemList.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueItemList.#ctor">
            <summary>
            Constructor - Creates an empty EmailQueueItemList object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueItemList.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailQueueItemList object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueItemList.GetData(CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result (not applied)</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>       
        </member>
        <member name="T:CMS.Newsletter.EmailTemplateHelper">
            <summary>
            Helper class for e-mail template manipulation.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateHelper.ValidateEditableRegions(System.String,System.Boolean@,System.Boolean@,System.Collections.Generic.List{System.String})">
            <summary>
            Check validity of editable regions (correct and unique code names)
            </summary>
            <param name="templateBody">Template</param>
            <param name="uniqueRegions">Returns TRUE if unique region names have been used</param>
            <param name="correctNames">Returns TRUE if valid region code names have been used</param>
            <param name="regionNames">List of region names from template (optional)</param>
        </member>
        <member name="T:CMS.Newsletter.ExtensionMethods.DictionaryExtensions">
            <summary>
            Extension methods for a generic dictionary.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ExtensionMethods.DictionaryExtensions.ForEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``1})">
            <summary>
            Performs the specified action on each element of the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="action">The action</param>
        </member>
        <member name="T:CMS.Newsletter.Extensions.Pop3ClientExtensions">
            <summary>
            Contains extension methods for POP3 client to simplify message processing.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.Extensions.Pop3ClientExtensions.GetSafeMessage(OpenPop.Pop3.Pop3Client,System.Int32)">
            <summary>
            Fetches a message from the server and parses it, consuming and logging any exceptions in the process.
            </summary>
            <param name="pop3Client">POP3 client</param>
            <param name="messageNumber">Message number on the server</param>
            <returns>Message object</returns>
        </member>
        <member name="T:CMS.Newsletter.ABTestInfo">
            <summary>
            ABTestInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ABTestInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfo.InsertAsCloneInternal(CMS.SettingsProvider.CloneSettings,CMS.SettingsProvider.CloneResult,CMS.SettingsProvider.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfo.#ctor">
            <summary>
            Constructor - Creates an empty ABTestInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ABTestInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfo.TestSelectWinnerAfter">
            <summary>
            Time interval (in minutes) after a winner will be selected.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfo.TestWinnerSelected">
            <summary>
            Gets or sets the date when winner was selected.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfo.TestLastModified">
            <summary>
            Gets or sets the date and time the object was last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfo.TestWinnerOption">
            <summary>
            Determines how to select winner.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfo.TestWinnerIssueID">
            <summary>
            Winner issue ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfo.TestGUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfo.TestIssueID">
            <summary>
            Parent issue (in case of A/B test).
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfo.TestID">
            <summary>
            ID of A/B test.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfo.TestSizePercentage">
            <summary>
            Size of test group in percents.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfo.TestNumberPerVariantEmails">
            <summary>
            Number of e-mail addresses to send per each variant.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfo.TestWinnerScheduledTaskID">
            <summary>
            ID of scheduled task to select winner.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.ABTestInfoProvider">
            <summary>
            Class providing ABTestInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ABTestInfoProvider.mABTestInfosByIssueID">
            <summary>
            States indexed by state code.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ABTestInfoProvider.tableLock">
            <summary>
            Table lock for loading.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.GetABTests(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns dataset of all abtests matching the specified parameters.
            </summary>
            <param name="where">Where condition.</param>
            <param name="orderBy">Order by expression.</param>
            <param name="topN">Number of records to be selected.</param>        
            <param name="columns">Columns to be selected.</param>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.GetABTests(System.String,System.String)">
            <summary>
            Returns dataset of all abtests matching the specified parameters.
            </summary>
            <param name="where">Where condition.</param>
            <param name="orderBy">Order by expression.</param>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.GetABTestInfo(System.Int32)">
            <summary>
            Returns abtest with specified ID.
            </summary>
            <param name="abtestId">Abtest ID.</param>        
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.SetABTestInfo(CMS.Newsletter.ABTestInfo)">
            <summary>
            Sets (updates or inserts) specified abtest.
            </summary>
            <param name="abtestObj">Abtest to be set.</param>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.DeleteABTestInfo(CMS.Newsletter.ABTestInfo)">
            <summary>
            Deletes specified abtest.
            </summary>
            <param name="abtestObj">Abtest to be deleted.</param>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.DeleteABTestInfo(System.Int32)">
            <summary>
            Deletes abtest with specified ID.
            </summary>
            <param name="abtestId">Abtest ID.</param>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.Clear(System.Boolean)">
            <summary>
            Clears hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged.</param>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.GetABTestInfoForIssue(System.Int32)">
            <summary>
            Returns ABTest info for the given issue (parent issue).
            </summary>
            <param name="issueId">Parent issue ID</param>        
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.GetABTestsInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns dataset of all abtests matching the specified parameters.
            </summary>
            <param name="where">Where condition.</param>
            <param name="orderBy">Order by expression.</param>
            <param name="topN">Number of records to be selected.</param>        
            <param name="columns">Columns to be selected.</param>
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.GetABTestInfoInternal(System.Int32)">
            <summary>
            Returns abtest with specified ID.
            </summary>
            <param name="abtestId">Abtest ID.</param>        
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.SetABTestInfoInternal(CMS.Newsletter.ABTestInfo)">
            <summary>
            Sets (updates or inserts) specified abtest.
            </summary>
            <param name="abtestObj">Abtest to be set.</param>        
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.DeleteABTestInfoInternal(CMS.Newsletter.ABTestInfo)">
            <summary>
            Deletes specified abtest.
            </summary>
            <param name="abtestObj">Abtest to be deleted.</param>        
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.GetABTestInfoForIssueInternal(System.Int32)">
            <summary>
            Returns ABTest info for the given issue (parent issue).
            </summary>
            <param name="issueId">Parent issue ID</param>        
        </member>
        <member name="M:CMS.Newsletter.ABTestInfoProvider.LoadTests">
            <summary>
            Loads tests to hashtable.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ABTestInfoProvider.ABTestInfosByIssueID">
            <summary>
            AB tests indexed by parent issue ID.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.NewsletterHelper">
            <summary>
            Newsletter helper class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterHelper.mLicNews">
            <summary>
            License limitation newsletter table
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.LicenseVersionCheck(System.String,CMS.SettingsProvider.FeatureEnum,CMS.SettingsProvider.VersionActionEnum)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action, if action is Insert limitations are not checked under CMSDesk/CMSSitemanager/</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.LicenseVersionCheck(System.String,CMS.SettingsProvider.FeatureEnum,CMS.SettingsProvider.VersionActionEnum,System.Boolean)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action</param>
            <param name="siteCheck">If true limitations are not applied under URLs in Site manager, CMS Desk, CMSModules and CMSPages/Logon</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.CheckLicense">
            <summary>
            Checks the license.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.CheckLicense(CMS.Newsletter.NewsletterInfo)">
            <summary>
            Checks the license for insert for a new newsletter or for edit in other cases.
            </summary>
            <param name="newsletter">Newsletter</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.ClearLicNewsletter">
            <summary>
            Clear license newsletter hashtable.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.IsTrackingAvailable">
            <summary>
            Checks if newsletter tracking (open e-mail, click through and bounces) is available for current URL.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.IsABTestingAvailable">
            <summary>
            Checks if newsletter A/B testing is available for current URL.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.OnlineMarketingAvailable(System.String)">
            <summary>
            Gets whether Online marketing is available and enabled for the site.
            </summary>
            <param name="siteName">Site name</param>
            <returns>TRUE if online marketing module is loaded, available and enabled for the site, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.OnlineMarketingEnabled(System.String)">
            <summary>
            Gets whether Online marketing is enabled for the site.
            </summary>
            <param name="siteName">Site name</param>
            <returns>TRUE if Open email tracking is enabled, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.UseExternalServiceForDynamicNewsletters(System.String)">
            <summary>
            Indicates if scheduled task for dynamic newsletters should run in windows service
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.MonitorBouncedEmails(System.String)">
            <summary>
            Gets whether bounced e-mails monitoring is enabled for the given site.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.BouncedEmailsLimit(System.String)">
            <summary>
            Gets limit for bounced e-mails.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.BouncedEmailAddress(System.String)">
            <summary>
            Gets e-mail address where bounced back e-mails should be sent.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterHelper.GenerateEmailsEnabled(System.String)">
            <summary>
            Gets if newsletter e-mail generation is enabled.
            </summary>
            <param name="siteName">Site name</param>
            <returns>true, if newsletter e-mail generation is enabled, otherwise false</returns>
        </member>
        <member name="P:CMS.Newsletter.NewsletterHelper.LicNews">
            <summary>
            License limitation newsletter table
            </summary>
        </member>
        <member name="T:CMS.Newsletter.SendNewsletterIssueAction">
            <summary>
            Class for Send newsletter issue action
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SendNewsletterIssueAction.LAST_SENT_NEWSLETTER_ISSUE_KEY">
            <summary>
            Key for element containing GUID of last sent newsletter.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SendNewsletterIssueAction.Execute">
            <summary>
            Executes current action
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SendNewsletterIssueAction.NewsletterIssue">
            <summary>
            Newsletter issue identifier.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.VariantEventArgs">
            <summary>
            Additional arguments for variant slider and variant dialog events.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.VariantEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="displayName">Display name</param>
        </member>
        <member name="M:CMS.Newsletter.VariantEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="displayName">Display name</param>
            <param name="id">ID</param>
        </member>
        <member name="P:CMS.Newsletter.VariantEventArgs.DisplayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="P:CMS.Newsletter.VariantEventArgs.ID">
            <summary>
            Issue ID
            </summary>
        </member>
        <member name="T:CMS.Newsletter.IssueABVariantItem">
            <summary>
            Class contains issue ID and variant name pair.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueABVariantItem.IssueID">
            <summary>
            Issue ID
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueABVariantItem.IssueVariantName">
            <summary>
            Variant name
            </summary>
        </member>
        <member name="M:CMS.Newsletter.IssueABVariantItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Newsletter.IssueABVariantItem.#ctor(System.Int32,System.String,System.Boolean,CMS.Newsletter.IssueStatusEnum)">
            <summary>
            Constructor
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="variantName">Variant name</param>
            <param name="isWinner">Winner</param>
            <param name="issueStatus">Issue status</param>
        </member>
        <member name="P:CMS.Newsletter.IssueABVariantItem.IsWinner">
            <summary>
            Flag indicates the winner
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueABVariantItem.IssueStatus">
            <summary>
            Issue status
            </summary>
        </member>
        <member name="T:CMS.Newsletter.EmailTemplateNewsletterInfo">
            <summary>
            EmailTemplateNewsletterInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.EmailTemplateNewsletterInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfo.#ctor">
            <summary>
            Constructor - Creates an empty EmailTemplateNewsletterInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailTemplateNewsletterInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateNewsletterInfo.TemplateID">
            <summary>
            Newsletter e-mail template ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateNewsletterInfo.NewsletterID">
            <summary>
            Newsletter ID.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.EmailTemplateNewsletterInfoProvider">
            <summary>
            Class providing EmailTemplateNewsletterInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfoProvider.#ctor">
            <summary>
            Creates a new instance of EmailTemplateNewsletterInfo.
            </summary>        
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfoProvider.GetEmailTemplateNewsletterInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified template and newsletter.
            </summary>
            <param name="templateId">Template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfoProvider.GetEmailTemplatesNewsletters(System.String,System.String)">
            <summary>
            Returns dataset of all relationships between templates and newsletters matching the specified criteria.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfoProvider.SetEmailTemplateNewsletterInfo(CMS.Newsletter.EmailTemplateNewsletterInfo)">
            <summary>
            Sets relationship between specified template and newsletter.
            </summary>
            <param name="tempNewsInfo">Template-newsletter relationship to be set</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfoProvider.AddNewsletterToTemplate(System.Int32,System.Int32)">
            <summary>
            Sets relationship between specified server and site.
            </summary>	
            <param name="templateId">Template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfoProvider.DeleteEmailTemplateNewsletterInfo(CMS.Newsletter.EmailTemplateNewsletterInfo)">
            <summary>
            Deletes relationship specified template and newsletter.
            </summary>
            <param name="tempNewsInfo">Template-newsletter relationship to be set</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfoProvider.RemoveNewsletterFromTemplate(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified template and specified newsletter.
            </summary>
            <param name="templateId">Email template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfoProvider.GetEmailTemplateNewsletterInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified template and newsletter.
            </summary>
            <param name="templateId">E-mail template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfoProvider.GetEmailTemplateNewsletterInfoInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns dataset of all relationships between e-mail templates and newsletters matching the specified criteria.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Number of records to be selected</param>        
            <param name="columns">Columns to be selected</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfoProvider.SetEmailTemplateNewsletterInfoInternal(CMS.Newsletter.EmailTemplateNewsletterInfo)">
            <summary>
            Sets relationship between specified template and newsletter.
            </summary>
            <param name="tempNewsInfo">Template-newsletter relationship to be set</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateNewsletterInfoProvider.DeleteEmailTemplateNewsletterInfoInternal(CMS.Newsletter.EmailTemplateNewsletterInfo)">
            <summary>
            Deletes relationship between specified template and newsletter.
            </summary>
            <param name="tempNewsInfo">Template-newsletter relationship to be deleted</param>
        </member>
        <member name="T:CMS.Newsletter.IssueStatusEnum">
            <summary>
            Issue status enumeration
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueStatusEnum.Idle">
            <summary>
            New issue that has not been sent yet
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueStatusEnum.ReadyForSending">
            <summary>
            Issue is ready for sending (i.e. scheduled task for sending is enabled)
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueStatusEnum.PreparingData">
            <summary>
            Newsletter queue is being filled
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueStatusEnum.TestPhase">
            <summary>
            For A/B test when testing is in progress
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueStatusEnum.Sending">
            <summary>
            Issue is being sent
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueStatusEnum.Finished">
            <summary>
            Issue has been sent
            </summary>
        </member>
        <member name="T:CMS.Newsletter.ABTestWinnerSelectionEnum">
            <summary>
            Winner option enumeration
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ABTestWinnerSelectionEnum.OpenRate">
            <summary>
            Winner will be selected according to open rate
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ABTestWinnerSelectionEnum.TotalUniqueClicks">
            <summary>
            Winner will be selected according to total clicks
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ABTestWinnerSelectionEnum.Manual">
            <summary>
            Winner will be selected manually
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberList.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberList.#ctor">
            <summary>
            Constructor - Creates an empty SubscriberList object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberList.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SubscriberList object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberList.GetData(CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result (not applied)</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>       
        </member>
        <member name="F:CMS.Newsletter.SubscriberNewsletterListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterListInfo.#ctor">
            <summary>
            Constructor - Creates an empty SubscriberNewsletterListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SubscriberNewsletterListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterListInfo.GetData(CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result (not applied)</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>       
        </member>
        <member name="T:CMS.Newsletter.SubscriberInfoProvider">
            <summary>
            Class providing Subscriber management.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberInfoProvider.mLicSubscribers">
            <summary>
            License limitation subscriber table
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscriberInfo(System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <returns>Subscriber specified by his ID</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscriberInfo(System.Guid,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber specified by his GUID and site</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscriberInfo(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberType">Subscriber type (SiteObjectType.USER or SiteObjectType.ROLE)</param>
            <param name="subscriberRelatedId">Subscriber's related ID</param>
            <param name="siteId">ID of the site this subscriber belongs to</param>
            <returns>Subscriber specified by his type, related ID and site</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscriberInfo(System.String,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber (excludes role and user subscriber types).
            </summary>
            <param name="email">Subscriber's email address</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber specified by his email and site ID</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscriberByEmail(System.String,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber (includes role and user subscriber types).
            </summary>
            <param name="email">Subscriber e-mail</param>
            <param name="siteId">Site ID</param>        
            <returns>Subscriber specified by his email and site ID</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscribersFromView(System.String,System.Int32)">
            <summary>
            Returns subscriber information for a specified email and site along with the related user data.
            </summary>
            <param name="email">Subscriber e-mail</param>
            <param name="siteId">Site ID</param>
            <returns>DataSet containing all subscribers with a given email that belong to a specified site</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscribersFromView(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns subscriber information along with the related user data.
            </summary>
            <param name="where">WHERE</param>
            <param name="orderBy">ORDERBY</param>
            <param name="topN">TOPN</param>
            <param name="columns">COLUMNS</param>
            <returns>DataSet containing all subscribers that match the criteria</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.SetSubscriberInfo(CMS.Newsletter.SubscriberInfo)">
            <summary>
            Sets (updates or inserts) specified subscriber.
            </summary>
            <param name="subscriber">Subscriber to set</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.DeleteSubscriberInfo(CMS.Newsletter.SubscriberInfo)">
            <summary>
            Deletes specified subscriber.
            </summary>
            <param name="subscriberObj">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.DeleteSubscriberInfo(System.Int32)">
            <summary>
            Deletes specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.Subscribe(System.Guid,System.Int32,System.Int32)">
            <summary>
            Subscribes subscriber to newsletter.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="newsletterId">Newsletter ID</param>        
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.Subscribe(System.Guid,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Subscribes subscriber to newsletter.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="siteId">Site ID</param>
            <param name="sendConfirmationEmail">Indicates whether send confirmation e-mail</param>                
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.Subscribe(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Subscribes subscriber to newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="when">Time when the subscriber was subscribed (used by import)</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.Subscribe(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Subscribes subscriber to newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="when">Time when the subscriber was subscribed (used by import)</param>
            <param name="sendConfirmationEmail">Indicates whether send confirmation e-mail</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.Subscribe(System.Int32,System.Int32,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Subscribes subscriber to newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="when">Time when the subscriber was subscribed (used by import)</param>
            <param name="sendConfirmationEmail">Indicates whether send confirmation e-mail</param>
            <param name="sendOptInEmail">Indicates if double opt-in e-mail should be send</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ApproveSubscription(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Approves existing subscription - sets SubscriptionApproved to true and SubscriptionApprovedWhen to current time. 
            Checks if subscription wasn't already approved. Confirmation e-mail may be sent optionally.
            </summary>
            <param name="subscriberId">ID of subscriber to be subscribed</param>
            <param name="newsletterId">Newsletter ID to subscribe into</param>
            <param name="sendConfirmationEmail">Indicates if confirmation e-mail should be sent. Confirmation e-mail may also be sent if newsletter settings requires so</param>
            <returns>Returns TRUE if subscription found and not already approved. Returns FALSE if subscription not already approved.</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ApproveSubscription(System.String,System.Boolean,System.String,System.DateTime)">
            <summary>
            Approves existing subscription - sets SubscriptionApproved to true and SubscriptionApprovedWhen to current time. 
            Checks if subscription wasn't already approved. Confirmation e-mail may be sent optionally.
            </summary>
            <param name="subscriptionHash">Hash parameter representing specific subscription</param>
            <param name="sendConfirmationEmail">Indicates if confirmation e-mail should be sent. Confirmation e-mail may also be sent if newsletter settings requires so</param>
            <param name="datetime">Date and time of request.</param>
            <param name="siteName">Site name.</param>
            <returns>Returns TRUE if subscription found and not already approved. Returns FALSE if subscription not found or already approved.</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.AddSubscription(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Add subscription to the binding table.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="when">Time when the subscriber was subscribed (used by import)</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.Unsubscribe(System.Int32,System.Int32)">
            <summary>
            Unsubscribes subscriber from newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.DeleteSubscription(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deletes subscription from the newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="sendConfirmationEmail">Indicates if unsubscription email should be send</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.RenewSubscription(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Renews subscription.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="sendConfirmationEmail">Indicates if subscription email should be send</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.Unsubscribe(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Unsubscribe the subscriber from the newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="sendConfirmationEmail">Indicates whether confirmation email is sent</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.Unsubscribe(System.String,System.Boolean,System.String,System.DateTime)">
            <summary>
            Unsubscribes subscriber from newsletter.
            </summary>
            <param name="subscriptionHash">Subscription hash.</param>
            <param name="sendConfirmationEmail">Indicates whether send confirmation e-mail</param>
            <param name="datetime">Date and time of request</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.Unsubscribe(CMS.Newsletter.SubscriberNewsletterInfo,System.Boolean)">
            <summary>
            Unsubscribes subscriber from newsletter.
            </summary>
            <param name="sni">Subscription object</param>
            <param name="sendConfirmationEmail">Indicates if confirmation e-mail should be sent</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.Unsubscribe(System.Guid,System.Guid,System.Int32)">
            <summary>
            Unsubscribes subscriber from newsletter.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="newsletterGuid">Newsletter GUID</param>
            <param name="siteId">Site ID</param>        
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.Unsubscribe(System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Unsubscribes subscriber from newsletter.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="newsletterGuid">Newsletter GUID</param>
            <param name="siteId">Site ID</param>
            <param name="sendConfirmationEmail">Indicates whether send confirmation mail</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.UnsubscribeAll(System.Int32,System.Boolean)">
            <summary>
            Unsubscribes subscriber from all subscribed newsletters.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="sendConfirmationEmail">Indicates whether confirmation email is sent</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscribers(CMS.Newsletter.SubscriberInfo)">
            <summary>
            Gets the list of subscribers's members.
            Subscriber member has SubscriberID=0.
            </summary>
            <param name="subscriber">Subscriber definition</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscribers(CMS.Newsletter.SubscriberInfo,System.Int32,System.Int32)">
            <summary>
            Gets the list of subscriber's members.
            Subscriber member has SubscriberID=0.
            </summary>
            <param name="subscriber">Subscriber definition</param>
            <param name="topN">Number of members that should be returned (all are returned if 0)</param>
            <param name="lastMemberID">Last member ID (used for subscribed role or contact group)</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscribers(CMS.Newsletter.SubscriberInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the list of subscriber's members.
            Subscriber member has SubscriberID=0.
            </summary>
            <param name="subscriber">Subscriber definition</param>
            <param name="topN">Number of members that should be returned (all are returned if 0)</param>
            <param name="lastMemberID">Last member ID (used for subscribed role or contact group)</param>
            <param name="newsletterID">Newsletter ID - it allows to filter-out unsubscribed contact group members</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.IsSubscribed(System.Guid,System.Guid,System.Int32)">
            <summary>
            Returns true if subscriber is subscribed to newsletter.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="newsletterGuid">Newsletter GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.IsSubscribed(System.Int32,System.Int32)">
            <summary>
            Returns true if subscriber is subscribed to newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.EmailExists(System.String)">
            <summary>
            Returns true if given e-mail address is already used by any subscriber.
            </summary>
            <param name="email">E-mail address</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetAllSubscribersOfNewsletter(System.Int32)">
            <summary>
            Returns list of IDs of all subscribers of specific newsletter.
            </summary>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetAllSubscribersOfNewsletter(System.Int32,System.Int32)">
            <summary>
            Returns top N subscriber IDs of specific newsletter.
            </summary>
            <param name="newsletterId">Newsletter ID</param>
            <param name="topN">Top N</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetApprovedSubscribersOfNewsletter(System.Int32,System.Int32)">
            <summary>
            Returns top N approved subscriber IDs of specific newsletter.
            </summary>
            <param name="newsletterId">Newsletter ID</param>
            <param name="topN">Top N</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscribers(System.String,System.String)">
            <summary>
            Returns the subscribers.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscribers(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the subscribers.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">TOP N</param>
            <param name="columns">Selected columns</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ImportSubscribersToSite(System.String,System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Import subscribers.
            </summary>
            <param name="importString">String representation of imported subscribers</param>
            <param name="newsletterIds">Array list with newsletters' IDs where should be the subscribers added</param>
            <param name="siteId">Site ID</param>
            <param name="overwriteExisting">If true, subscribers with the same email are overwritten</param>
            <param name="sendEmail">Send confirmation email</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ImportSubscribersToSite(System.String,System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Import subscribers.
            </summary>
            <param name="importString">String representation of imported subscribers</param>
            <param name="newsletterIds">Array list with newsletters' IDs where should be the subscribers added</param>
            <param name="siteId">Site ID</param>
            <param name="overwriteExisting">If true, subscribers with the same email are overwritten</param>
            <param name="sendEmail">Send confirmation email</param>
            <param name="doNotSubscribeExisting">Indicates if existing users should not be subscribed</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ImportSubscribersToSite(System.Object)">
            <summary>
            Imports subscribers into site and/or newsletter. Used for asynchronous control.
            </summary>
            <param name="parameter">Asynchronous parameters.
            [0] - String representation of imported subscribers
            [1] - List with newsletters' IDs where should be the subscribers added
            [2] - Integer with site ID
            [3] - Boolean. if true, subscribers with the same email are overwritten
            [4] - Boolean. Send confirmation email.
            [5] - Boolean. Indicates if existing users should not be subscribed.
            [6] - Boolean. Indicates if double opt-in is requested.
            [7] - Asynchronous process Guid.
            [8] - Hashtable with errorrs</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ImportSubscribersToSite(System.String,System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Import subscribers.
            </summary>
            <param name="importString">String representation of imported subscribers</param>
            <param name="newsletterIds">Array list with newsletters' IDs where should be the subscribers added</param>
            <param name="siteId">Site ID</param>
            <param name="overwriteExisting">If true, subscribers with the same email are overwritten</param>
            <param name="sendEmail">Send confirmation email</param>
            <param name="doNotSubscribeExisting">Indicates if existing users should not be subscribed</param>
            <param name="requireOptIn">Indicates double opt-in is requested</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ImportSubscribersToSite(System.String,System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Guid,System.Collections.Hashtable)">
            <summary>
            Import subscribers.
            </summary>
            <param name="importString">String representation of imported subscribers</param>
            <param name="newsletterIds">Array list with newsletters' IDs where should be the subscribers added</param>
            <param name="siteId">Site ID</param>
            <param name="overwriteExisting">If true, subscribers with the same email are overwritten</param>
            <param name="sendEmail">Send confirmation email</param>
            <param name="doNotSubscribeExisting">Indicates if existing users should not be subscribed</param>
            <param name="requireOptIn">Indicates double opt-in is requested</param>
            <param name="processGuid">Asynchronous process GUID</param>
            <param name="errors">Hashtable with errors</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ExportSubscribersFromSite(System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Export subscribers from specified newsletters.
            </summary>
            <param name="newsletterIds">Newsletters' IDs</param>
            <param name="siteId">Site ID</param>
            <param name="emptyMeansAll">If true, empty array of newsletters' IDs means all subscribers are exported</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ExportSubscribersFromSite(System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Int32)">
            <summary>
            Export subscribers from specified newsletters.
            </summary>
            <param name="newsletterIds">Newsletters' IDs</param>
            <param name="siteId">Site ID</param>
            <param name="emptyMeansAll">If true, empty array of newsletters' IDs means all subscribers are exported</param>
            <param name="subscriptionApproved">0 = all subscriptions, 1 = approved subscriptions, 2 = not approved subscriptions</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.LicenseVersionCheck(System.String,CMS.SettingsProvider.FeatureEnum,CMS.SettingsProvider.VersionActionEnum)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action, if action is Insert limitations are not checked under CMSDesk/CMSSitemanager/</param>
            <returns>Returns true if license is not exceeded, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.LicenseVersionCheck(System.String,CMS.SettingsProvider.FeatureEnum,CMS.SettingsProvider.VersionActionEnum,System.Boolean)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action</param>
            <param name="siteCheck">If true limitations are not applied under URLs in Site manager, CMS Desk, CMSModules and CMSPages/Logon</param>
            <returns>Returns true if license is not exceeded, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.CheckLicense">
            <summary>
            Checks the license.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.UnsubscribeFromNewsletters(System.Object)">
            <summary>
            Unsubscribe subscribers from specified newsletters. Used for asynchronous control.
            </summary>
            <param name="parameter">Parameters for asynchronous control. 
            [0] - String representation of subscribers in format 'email;firstName;lastName'. 
            [1] - List with newsletter IDs where should be the subscribers removed from
            [2] - Integer with site ID
            [3] - Boolean value indicating if confirmation e-mail should be sent
            [4] - Asynchronous process Guid
            [5] - Hashtable with errors for asynchronous process</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.UnsubscribeFromNewsletters(System.String,System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Unsubscribe subscribers from specified newsletters.
            </summary>
            <param name="importString">String represenatiton of subscribers in format 'email;firstName;lastName'</param>
            <param name="newsletterIds">Array list with newsletter IDs where should be the subscribers removed from</param>
            <param name="siteId">Site ID</param>
            <param name="sendEmail">Send confirmation email</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.UnsubscribeFromNewsletters(System.String,System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Guid,System.Collections.Hashtable)">
            <summary>
            Unsubscribe subscribers from specified newsletters.
            </summary>
            <param name="importString">String represenatiton of subscribers in format 'email;firstName;lastName'</param>
            <param name="newsletterIds">Array list with newsletter IDs where should be the subscribers removed from</param>
            <param name="siteId">Site ID</param>
            <param name="sendEmail">Send confirmation email</param>
            <param name="processGuid">Asynchronous process Guid</param>
            <param name="errors">Errors hashtable</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.DeleteSubscribers(System.Object)">
            <summary>
            Delete given subscribers. Used for asynchronous control.
            </summary>
            <param name="parameter">Parameters for asynchronous processing.
            [0] - String representation of subscribers in format 'email;firstName;lastName'
            [1] - Integer with site ID
            [2] - Asynchronous process GUID
            [3] - Hashtable with errors for asynchronous processing</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.DeleteSubscribers(System.String,System.Int32)">
            <summary>
            Delete given subscribers.
            </summary>
            <param name="importString">String representation of subscribers in format 'email;firstName;lastName'</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.DeleteSubscribers(System.String,System.Int32,System.Guid,System.Collections.Hashtable)">
            <summary>
            Delete given subscribers.
            </summary>
            <param name="importString">String representation of subscribers in format 'email;firstName;lastName'</param>
            <param name="siteId">Site ID</param>
            <param name="processGuid">Asynchronous process GUID</param>
            <param name="errors">Hashtable with errors</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.BlockSubscriber(System.Int32)">
            <summary>
            Blocks a subscriber with a specified ID.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.UnblockSubscriber(System.Int32)">
            <summary>
            Unblocks a subscriber with a specified ID.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.BlockUser(System.Int32)">
            <summary>
            Blocks a user with a specified ID (for role subscribers).
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.UnblockUser(System.Int32)">
            <summary>
            Unblocks a user with a specified ID (for role subscribers).
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.BlockContact(System.Int32)">
            <summary>
            Blocks a contact with specified ID (for contact group subscribers).
            </summary>
            <param name="contactId">ContactID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.UnblockContact(System.Int32)">
            <summary>
            Unblocks a contact with specified ID (for contact group subscribers).
            </summary>
            <param name="contactId">ContactID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.DeleteSubscriberInfos(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Deletes SubscriberInfo objects with dependencies based on specified subscriber IDs.
            </summary>
            <param name="ids">List of subscriber IDs</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.SetSubscriberBounces(System.Int32,System.Int32)">
            <summary>
            Sets the bounced e-mails counter to specified value for a subscriber.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="bounces">Number of bounced e-mails to set</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.SetUserBounces(System.Int32,System.Int32)">
            <summary>
            Sets the bounced e-mails counter to specified value for a user.
            </summary>
            <param name="userId">User ID</param>
            <param name="bounces">Number of bounced e-mails to set</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.CreateSubscriber(System.Int32,CMS.Newsletter.SubscriberInfo,System.Boolean)">
            <summary>
            Creates subscriber object using user info and source subscriber data.
            </summary>
            <param name="userId">User ID</param>
            <param name="original">Source subscriber</param>
            <param name="getUserMail">If FALSE then user e-mail is not retrieved from DB</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.CreateSubscriberFromContact(System.Int32,CMS.Newsletter.SubscriberInfo,System.Boolean)">
            <summary>
            Creates subscriber object using user info and source subscriber data.
            </summary>
            <param name="contactId">Contact ID</param>
            <param name="original">Source subscriber</param>
            <param name="getContactEmail">If FALSE then contact e-mail is not retrieved from DB</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ClearLicSubscribers">
            <summary>
            Clear hashtable.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ApproveSubscription(CMS.Newsletter.SubscriberNewsletterInfo,System.Boolean)">
            <summary>
            Approves existing subscription - sets SubscriptionApproved to true and SubscriptionApprovedWhen to current time. 
            Checks if subscription wasn't already approved. Confirmation e-mail may be sent optionally.
            </summary>
            <param name="sni">SubscriberNewsletterInfo object</param>
            <param name="sendConfirmationEmail">Indicates if confirmation e-mail should be sent. Confirmation e-mail may also be sent if newsletter settings requires so</param>
            <returns>Returns TRUE if subscription found and not already approved. Returns FALSE if subscription not found or already approved.</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetRoleUsers(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Gets all (or top N) users in a given role that have not exceeded the bounced e-mails limit.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="topN">Top N</param>
            <param name="lastUserId">Last user's ID (if email sets are used, otherwise set to 0)</param>
            <param name="siteName">Site name</param>
            <returns>DataSet with a list of user IDs and emails</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetRoleUsers(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Gets all (or top N) users in a given role that have not exceeded the bounced e-mails limit.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="topN">Top N</param>
            <param name="lastUserId">Last user's ID (if email sets are used, otherwise set to 0)</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
            <returns>DataSet with a list of user IDs and emails</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetCGMembers(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Gets all (or top N) contacts in a given contact group.
            </summary>
            <param name="contactGroupId">Contact group ID</param>
            <param name="topN">Top N</param>
            <param name="lastMemberId">Contacts with higher IDs will be returned</param>
            <param name="siteName">Site name</param>
            <param name="newsletterId">Newsletter ID - it allows to filter-out unsubscribed contact group members</param>
            <param name="columns">Allows to specify columns to be returned</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ValidateHash(CMS.Newsletter.SubscriberNewsletterInfo,System.String,System.String,System.DateTime)">
            <summary>
            Validates request hash and checks if request was approved in needed interval.  
            </summary>
            <param name="sni">Subscriber newsletter info.</param>
            <param name="requestHash">Hash parameter representing specific subscription</param>
            <param name="datetime">Date and time of request.</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscriberMember(CMS.Newsletter.SubscriberInfo,CMS.Newsletter.EmailQueueItem)">
            <summary>
            Returns subscriber member object with basic data (first/last name, e-mail address) set according to subscriber type.
            </summary>
            <param name="source">Subscriber object</param>
            <param name="email">Item of newsletter queue</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscriberInfoInternal(System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <returns>Subscriber specified by his ID</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscriberInfoInternal(System.Guid,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber specified by his GUID and site</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscriberInfoInternal(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberType">Subscriber type (SiteObjectType.USER or SiteObjectType.ROLE)</param>
            <param name="subscriberRelatedId">Subscriber's related ID</param>
            <param name="siteId">ID of the site this subscriber belongs to</param>
            <returns>Subscriber specified by his type, related ID and site</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscriberInfoInternal(System.String,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber (excludes role and user subscriber types).
            </summary>
            <param name="email">Subscriber's email address</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber specified by his email and site ID</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscribersFromViewInternal(System.String,System.Int32)">
            <summary>
            Returns subscriber information for a specified email and site along with the related user data.
            </summary>
            <param name="email">Subscriber e-mail</param>
            <param name="siteId">Site ID</param>
            <returns>DataSet containing all subscribers with a given email that belong to a specified site</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscribersFromViewInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns subscriber information along with the related user data.
            </summary>
            <param name="where">WHERE</param>
            <param name="orderBy">ORDERBY</param>
            <param name="topN">TOPN</param>
            <param name="columns">COLUMNS</param>
            <returns>DataSet containing all subscribers that match the criteria</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.SetSubscriberInfoInternal(CMS.Newsletter.SubscriberInfo)">
            <summary>
            Sets (updates or inserts) specified subscriber.
            </summary>
            <param name="subscriber">Subscriber to set</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.DeleteSubscriberInfoInternal(CMS.Newsletter.SubscriberInfo)">
            <summary>
            Deletes specified subscriber.
            </summary>
            <param name="subscriberObj">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.EmailExistsInternal(System.String)">
            <summary>
            Returns true if given e-mail address is already used by any subscriber.
            </summary>
            <param name="email">E-mail address</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetNewsletterSubscribersInternal(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns subscribers of specific newsletter.
            </summary>
            <param name="newsletterId">Newsletter ID</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">TOP N</param>
            <param name="columns">Selected columns</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.GetSubscribersInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the subscribers.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">TOP N</param>
            <param name="columns">Selected columns</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.ExportSubscribersFromSiteInternal(System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Int32)">
            <summary>
            Export subscribers from specified newsletters.
            </summary>
            <param name="newsletterIds">Newsletters' IDs</param>
            <param name="siteId">Site ID</param>
            <param name="emptyMeansAll">If true, empty array of newsletters' IDs means all subscribers are exported</param>
            <param name="subscriptionApproved">0 = all subcriptions, 1 = approved subscriptions, 2 = not approved subscriptions</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.RemoveObjectDependencies(CMS.Newsletter.SubscriberInfo)">
            <summary>
            Removes object dependencies.
            </summary>
            <param name="infoObj">Object for which the dependencies should be removed</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfoProvider.DeleteSubscriberInfosInternal(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Deletes SubscriberInfo objects with dependencies based on specified subscriber IDs.
            </summary>
            <param name="ids">List of subscriber IDs</param>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfoProvider.LicSubscribers">
            <summary>
            License limitation subscriber table
            </summary>
        </member>
        <member name="T:CMS.Newsletter.SubscriberInfoProvider.ApprovalResult">
            <summary>
            Subscription approval result.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberInfoProvider.ApprovalResult.Success">
            <summary>
            Represents that subscription was found and successfully approved.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberInfoProvider.ApprovalResult.Failed">
            <summary>
            Represents that subscription has failed.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberInfoProvider.ApprovalResult.NotFound">
            <summary>
            Represents that subscription wasn't found.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberInfoProvider.ApprovalResult.TimeExceeded">
            <summary>
            Represents that subscription interval for approving request has exceeded.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.BounceChecker">
            <summary>
            Task for checking bounced newsletter e-mails.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Executes the task given in a task info.
            </summary>
            <param name="task">Container with task information</param>
            <returns>Textual description of task run's failure if any.</returns>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.ProcessAllEmails">
            <summary>
            Connects to the predefined mailbox, retrieves and checks all messages.
            </summary>
            <returns>Textual description of task run's failure if any.</returns>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.GetAuthenticationMethod">
            <summary>
            Gets the authentication method.
            </summary>
            <returns>Value from an enumeration that represents the chosen authentication method</returns>
            <exception cref="T:System.ArgumentException">Thrown when a chosen authnetication method is unsupported or malformed</exception>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.CustomFallbackDecoder(System.String)">
            <summary>
            Occurs when a character set name could not be mapped to the encoding.
            Calls OnFallbackDecoderEvent event if defined.
            </summary>
            <param name="characterSet">Character set name</param>
            <returns>Encoding</returns>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.ProcessEmail(OpenPop.Mime.Message)">
            <summary>
            Checks a given e-mail message for known header fields.
            If the message is recognized as bounced e-mail, then it is processed and counted.
            </summary>
            <param name="message">E-mail message</param>
            <returns>true, if message is a recognized bounced e-mail, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.TryGetHeaderValue(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to find a known field in unknown header collection.
            </summary>
            <param name="headerField">Field code</param>
            <param name="headers">Header collection</param>
            <returns>Integer value from specified header or 0 if not found</returns>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.TryParseField(System.Text.RegularExpressions.Regex,System.String,System.Int32@)">
            <summary>
            Attempts to find a known field using regex using try-parse pattern.
            </summary>
            <param name="regex">Regular expresssion used to look for the field</param>
            <param name="input">Input text</param>
            <param name="fieldID">Extracted ID from the field on success</param>
            <returns>true, if parsing was successful, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.AddBouncedEmail(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a bounce to all respective bounced email counters.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="subscriberId">Subscriber ID</param>
            <param name="userId">User ID</param>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.RetrieveBouncedAddress(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves a bounced address of an intended recipient of the newsletter e-mail.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="userId">User ID</param>
            <param name="contactId">Contact ID</param>
            <returns>E-mail address where the newsletter could not be delivered</returns>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.AddEmailBounceGlobal(System.String)">
            <summary>
            Increments the number of bounces for every subscriber, user or contact with a specified e-mail address across all sites.
            </summary>
            <param name="email">E-mail address to filter by</param>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.AddIssueBounce(System.Int32)">
            <summary>
            Incerements number of bounces for the specified issue by one.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.AddSubscriberBounce(System.Int32)">
            <summary>
            Incerements number of bounces for the specified subscriber by one.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.AddSubscriberBounce(CMS.Newsletter.SubscriberInfo)">
            <summary>
            Incerements number of bounces for the specified subscriber by one.
            </summary>
            <param name="subscriber">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.AddUserBounce(System.Int32)">
            <summary>
            Incerements number of bounces for the specified user by one.
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.AddContactBounce(System.Int32)">
            <summary>
            Incerements number of bounces by one for specified contact.
            </summary>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.GetSubscribers(System.String)">
            <summary>
            Returns IDs of all regular and user subscribers with a specified email address.
            </summary>
            <param name="email">E-mail address to filter subscribers by</param>
            <returns>DataSet with matching subscriber IDs</returns>
        </member>
        <member name="M:CMS.Newsletter.BounceChecker.GetUsers(System.String)">
            <summary>
            Returns IDs of all users with a specified email address.
            </summary>
            <param name="email">E-mail address to filter subscribers by</param>
            <returns>DataSet with matching user IDs</returns>
        </member>
        <member name="E:CMS.Newsletter.BounceChecker.OnFallbackDecoderEvent">
            <summary>
            Occurs when a character set from email content type header could not be mapped to the encoding.
            This allows to map given character set name to the encoding manually.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.BounceChecker.IssueIDRegex">
            <summary>
            Gets a regex that can be used to parse email header fields to search for an issue ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.BounceChecker.SubscriberIdRegex">
            <summary>
            Gets a regex that can be used to parse email header fields to search for an subscriber ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.BounceChecker.UserIDRegex">
            <summary>
            Gets a regex that can be used to parse email header fields to search for an user ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.BounceChecker.ContactIDRegex">
            <summary>
            Gets a regex that can be used to parse email header fields to search for an contact ID.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.BounceChecker.FallbackDecoderHandler">
            <summary>
            Occurs when a character set name could not be mapped to the encoding.
            </summary>
            <param name="characterSet">Character set name</param>
        </member>
        <member name="T:CMS.Newsletter.EmailTemplateType">
            <summary>
            Email template type enumeration.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.EmailTemplateType.Issue">
            <summary>
            Newsletter issue template.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.EmailTemplateType.Subscription">
            <summary>
            Newsletter subscription template.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.EmailTemplateType.Unsubscription">
            <summary>
            Newsletter unsubscription template.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.EmailTemplateType.DoubleOptIn">
            <summary>
            Double opt-in activation template.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.WinnerSelection">
            <summary>
            Scheduled task - selects the best issue variant and sends it to subscribers.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.WinnerSelection.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Selects the best issue variant and sends it to subscribers.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="M:CMS.Newsletter.WinnerSelection.PostponeScheduledTask(CMS.Scheduler.TaskInfo)">
            <summary>
            Postpones given scheduled task for an hour.
            </summary>
            <param name="task">Scheduled task</param>
        </member>
        <member name="T:CMS.Newsletter.ActivityTrackingHelper">
            <summary>
            Helper methods for logging activities for opened e-mails and link tracking.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ActivityTrackingHelper.GetContactID(CMS.Newsletter.SubscriberInfo)">
            <summary>
            Returns contact ID for particular subscriber (only ordinary subscribers or user subscribers are considered).
            </summary>
            <param name="sb">Subscriber</param>
        </member>
        <member name="T:CMS.Newsletter.LinkInfo">
            <summary>
            LinkInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.LinkInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.LinkInfo.#ctor">
            <summary>
            Creates a new LinkInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.LinkInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new LinkInfo object from the specified DataRow.
            </summary>
            <param name="linkInfoRow">Raw values from DB table that represent this object</param>
        </member>
        <member name="M:CMS.Newsletter.LinkInfo.#ctor(CMS.Newsletter.LinkInfo,System.Boolean)">
            <summary>
            Creates a new LinkInfo object from the existing LinkInfo object.
            Copy constructor.
            </summary>
            <param name="linkInfo">Original object to copy</param>
            <param name="keepSourceData">If true, the copy is shallow, otherwise a deep copy is created (all object's data is cloned)</param>
        </member>
        <member name="M:CMS.Newsletter.LinkInfo.DeleteObject">
            <summary>
            Deletes this LinkInfo object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.LinkInfo.SetObject">
            <summary>
            Updates this LinkInfo the object using appropriate provider.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.LinkInfo.LinkID">
            <summary>
            Gets or sets the ID of this LinkInfo object.
            </summary>
            <value>
            ID of this LinkInfo object or 0 if not present.
            </value>
        </member>
        <member name="P:CMS.Newsletter.LinkInfo.LinkIssueID">
            <summary>
            Gets or sets ID of the newsletter's issue.
            </summary>
            <value>
            Newsletter issue's ID, or 0 if not found.
            </value>
        </member>
        <member name="P:CMS.Newsletter.LinkInfo.LinkGUID">
            <summary>
            Gets or sets the unique identifier of this link.
            </summary>
            <value>
            Link's unique identifier or empty unique identifier if not present.
            </value>
        </member>
        <member name="P:CMS.Newsletter.LinkInfo.LinkTarget">
            <summary>
            Gets or sets the original link URL.
            </summary>
            <value>
            The original URL of the link, or empty string if not present.
            </value>
        </member>
        <member name="P:CMS.Newsletter.LinkInfo.LinkDescription">
            <summary>
            Gets or sets the description of this link.
            </summary>
            <value>
            The description contains text from <em>title</em> parameter of the link.
            </value>
        </member>
        <member name="P:CMS.Newsletter.LinkInfo.LinkOutdated">
            <summary>
            Gets or sets whether the link should not be used in the latest version of the issue.
            </summary>
            <value>
            true if the link should not be used, otherwise false.
            </value>
        </member>
        <member name="P:CMS.Newsletter.LinkInfo.LinkTotalClicks">
            <summary>
            Gets or sets the total number of times this link was clicked.
            </summary>
            <value>
            Number of times this link was clicked, or 0 when not present.
            </value>
        </member>
        <member name="T:CMS.Newsletter.LinkInfoProvider">
            <summary>
            Class providing LinkInfoProvider management.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.#ctor">
            <summary>
            Creates a new instance of LinkInfoProvider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.CreateInfo(System.Data.DataRow)">
            <summary>
            Creates a new GeneralizedInfo object.
            </summary>
            <param name="dr">Data to use to create a new object</param>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.GetLinkInfo(System.Int32)">
            <summary>
            Gets a LinkInfo object with specified ID.
            </summary>
            <param name="linkId">ID of the link</param>        
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.GetLinkInfo(System.Guid)">
            <summary>
            Gets a LinkInfo object with specified GUID.
            </summary>
            <param name="linkGuid">GUID of the link</param>                
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.GetLinks">
            <summary>
            Gets a dataset with all LinkInfo objects.
            </summary>
            <returns>A <see cref="T:System.Data.DataSet"/> containing all links</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.GetLinks(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets a dataset with LinkInfo objects that meet specified requirements.
            </summary>
            <param name="where">A filter for collection</param>
            <param name="orderBy">Ordering expression</param>
            <param name="topN">Number of objects to retrieve</param>
            <param name="columns">An expression containing the columns to retrieve</param>        
            <returns>A <see cref="T:System.Data.DataSet"/> containing all links</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.GetLinks(System.Int32)">
            <summary>
            Gets all links in the specified issue.
            </summary>
            <param name="issueId">Issue ID</param>
            <returns>A Dictionary with links from the specified issue, using link URL as the key</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.SetLinkInfo(CMS.Newsletter.LinkInfo)">
            <summary>
            Sets (updates or inserts) a specified LinkInfo object.
            </summary>
            <param name="linkObj">LinkInfo object to set</param>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.DeleteLinkInfo(CMS.Newsletter.LinkInfo)">
            <summary>
            Deletes a specified LinkInfo object.
            </summary>
            <param name="linkObj">LinkInfo object to delete</param>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.DeleteLinkInfo(System.Int32)">
            <summary>
            Deletes a LinkInfo object specified by ID.
            </summary>
            <param name="linkId">ID of the LinkInfo object to delete</param>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.LogClick(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Logs that a link was clicked by a specified subscriber.
            </summary>
            <param name="linkId">ID of the newsletter issue</param>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="isContactGroup">Indicates that subscriber is contact group</param>
            <returns>Original link URL, or empty string if not successfull</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.Outdate(CMS.Newsletter.LinkInfo)">
            <summary>
            Outdates the specified link.
            </summary>
            <param name="link">The link</param>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.Renew(CMS.Newsletter.LinkInfo)">
            <summary>
            Renews the specified link.
            </summary>
            <param name="link">The link</param>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.GetLinkInfoInternal(System.Int32)">
            <summary>
            Gets a LinkInfo object with specified ID.
            </summary>        
            <param name="linkId">ID of the link</param>        
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.GetLinkInfoInternal(System.Guid)">
            <summary>
            Gets a LinkInfo object with specified GUID.
            </summary>        
            <param name="linkGuid">GUID of the link</param>        
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.GetLinksInternal">
            <summary>
            Gets a dataset with all LinkInfo objects.
            </summary>        
            <returns>A <see cref="T:System.Data.DataSet"/> containing all links</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.GetLinksInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets a dataset with LinkInfo objects that meet specified requirements.
            </summary>
            <param name="where">A filter for collection</param>
            <param name="orderBy">Ordering expression</param>
            <param name="topN">Number of objects to retrieve</param>
            <param name="columns">An expression containing the columns to retrieve</param>                
            <returns>A <see cref="T:System.Data.DataSet"/> containing all links</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.SetLinkInfoInternal(CMS.Newsletter.LinkInfo)">
            <summary>
            Sets (updates or inserts) a specified LinkInfo object.
            </summary>
            <param name="linkObj">LinkInfo object to set</param>      
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.DeleteLinkInfoInternal(CMS.Newsletter.LinkInfo)">
            <summary>
            Deletes a LinkInfo object specified by ID.
            </summary>
            <param name="linkObj">LinkInfo object to delete</param>      
        </member>
        <member name="M:CMS.Newsletter.LinkInfoProvider.LogClickInternal(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Logs that a link was clicked by a specified subscriber.
            </summary>
            <param name="linkId">ID of the newsletter issue</param>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="isContactGroup">Indicates that subscriber is contact group</param>
            <returns>Original link URL, or empty string if not successfull</returns>
        </member>
        <member name="T:CMS.Newsletter.LinkConverter">
            <summary>
            Converts links in newsletter issue text.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.LinkConverter.TrackingAttribute">
            <summary>
            Name of the HTML anchor's attribute that determines whether tracking is enabled or not.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.ConvertToAbsolute(System.String,System.String)">
            <summary>
            Converts links from relative to absolute.
            </summary>
            <param name="input">Text containing links with relative URLs</param>
            <param name="baseUrl">Base URL to use when resolving links</param>
            <returns>Text with all links converted to absolute form</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.ReplaceInLink(System.String,System.String,System.String)">
            <summary>
            Replace old value with new value in all links from input text.
            </summary>
            <param name="input">Text containing links</param>
            <param name="oldValue">Value to be replaced</param>
            <param name="newValue">Value to replace</param>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.ConvertToTracking(System.String,CMS.Newsletter.IssueInfo,CMS.Newsletter.NewsletterInfo,System.String)">
            <summary>
            Converts links to tracking links.
            </summary>
            <param name="input">Text containing links with relative URLs</param>
            <param name="issue">Newsletter issue that contains the text to resolve</param>
            <param name="newsletter">Newsletter</param>
            <param name="domainName">Domain name of the newsletter site</param>
            <returns>Text with all links converted to tracking links</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.FormatLink(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Creates a link from the regular expression match and link URL.
            </summary>
            <param name="match">Regex match result</param>
            <param name="url">Link after resolution</param>
            <returns>Full hyperlink with attributes, URL and text</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.CreateTrackingLink(System.Text.RegularExpressions.Match,CMS.Newsletter.IssueInfo,System.Collections.Generic.Dictionary{System.String,CMS.Newsletter.LinkInfo},System.Collections.Generic.Dictionary{System.String,CMS.Newsletter.LinkInfo},System.String)">
            <summary>
            Creates a tracking hyperlink link from a given regex match.
            </summary>
            <param name="match">Regular expression matching result</param>
            <param name="issue">Newsletter issue</param>
            <param name="links">Dictionary containing links found in this version of the issue, using URL as key</param>
            <param name="originalLinks">Dictionary containing links that existed in the previous version of the issue, using URL as key</param>
            <param name="trackingLink">Tracking link without query parameters</param>
            <returns>A tracking hyperlink</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.IsTrackable(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Checks whether given URL can and should be tracked.
            </summary>
            <param name="match">Regex match result for a hyperlink</param>
            <param name="url">URL to check</param>
            <returns>true if specified URL can be tracked, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.IsSupportedUriScheme(System.String)">
            <summary>
            Determines whether the URI is of a supported scheme.
            </summary>
            <param name="url">The URL</param>
            <returns><c>true</c> if URI scheme is supported, otherwise, <c>false</c></returns>
            <remarks>Currently, only HTTP/HTTPS is supported because of the need to use redirects.</remarks>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.GetDescription(System.Text.RegularExpressions.Match)">
            <summary>
            Gets a description for tracked link either from title attribute or anchor's element text.
            </summary>
            <param name="match">Regex match result for a hyperlink</param>
            <returns>Link's description</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.FormatHyperlink(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Creates a tracking link from the regular expression match and link URL.
            </summary>
            <param name="match">Regex match result for a hyperlink</param>
            <param name="url">Link after resolution</param>
            <returns>Full tracking hyperlink with attributes, URL and text</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.GetAbsoluteUrl(System.String,System.String)">
            <summary>
            Creates an absolute URL for use in newsletter.
            </summary>
            <param name="relativeUrl">Relative URL</param>
            <param name="baseUrl">Base URL</param>
            <returns>Absolute URL</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.ContainsProtocol(System.String)">
            <summary>
            Checks if URL contains protocol, including javascript pseudo-protocol.
            </summary>
            <param name="url">URL from a hyperlink</param>
            <returns>true, if URL contains protocol, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkConverter.GetRedirectPage(CMS.Newsletter.NewsletterInfo,System.String)">
            <summary>
            Returns a redirect page used for link tracking.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="domainName">Domain name</param>
            <returns>Absolute URL to redirect page</returns>
        </member>
        <member name="P:CMS.Newsletter.LinkConverter.LinkRegex">
            <summary>
            Gets a regular expression that matches a link.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.LinkConverter.HyperlinkRegex">
            <summary>
            Gets a regular expression that matches an anchor hyperlink.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.LinkConverter.RedirectPage">
            <summary>
            Gets the handler used to perform link tracking and redirection.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.NewsletterSender">
            <summary>
            Task for re-sending remaining newsletters in newsletter gueue
            after main thread sender exit unexpectedly.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterSender.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
             Sends all emails in newsletter queue.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="T:CMS.Newsletter.NewsletterModule">
            <summary>
            Module registration.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.#ctor(CMS.SettingsProvider.ModuleInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Module info</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.RegisterObjectTypes">
            <summary>
            Registers the object type of this module
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.RegisterCommands">
            <summary>
            Registers the object type of this module
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.GetSubscriber(System.Object[])">
            <summary>
            Get subscriber
            </summary>
            <param name="parameters">Parameters array</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.GetUserSubscriberIDs(System.Object[])">
            <summary>
            Returns IDs of user's subscribers specified by UserID.
            </summary>
            <param name="parameters">UserID as a first parameter</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.GetRoleSubscriberIDs(System.Object[])">
            <summary>
            Returns IDs of role's subscribers specified by RoleID.
            </summary>
            <param name="parameters">RoleID as a first parameter</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.GetSiteIssueIDs(System.Object[])">
            <summary>
            Returns IDs of site's issues specified by SiteID.
            </summary>
            <param name="parameters">SiteID as a first parameter</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.GetClickThroughLink(System.Object[])">
            <summary>
            Returns target link
            </summary>
            <param name="parameters">Parameters array</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.GetNewsletterInfo(System.Object[])">
            <summary>
            Returns newsletter info
            </summary>
            <param name="parameters">Parameters array</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.GetIssueInfo(System.Object[])">
            <summary>
            Get newsletter issue info
            </summary>
            <param name="parameters">Parameters array</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.CancelSending(System.Object[])">
            <summary>
            Stop current sending
            </summary>
            <param name="parameters">Parameters array</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.ClearEmailsSendingStatus(System.Object[])">
            <summary>
            Clears the sending status
            </summary>
            <param name="parameters">Parameters array</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.SendAllEmails(System.Object[])">
            <summary>
            Send the e-mails
            </summary>
            <param name="parameters">Parameters array</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterModule.DeleteContactSubscribers(System.Object[])">
            <summary>
            Deletes contact subscribers based on contact IDs.
            </summary>
            <param name="parameters">Parameters array</param>
        </member>
        <member name="T:CMS.Newsletter.DynamicNewsletterSender">
            <summary>
            Class used by scheduler to execute the dynamic newsletter mailout.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.DynamicNewsletterSender.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Generates issue of dynamic newsletter, then generates emails of that issue into queue and send all emails in queue to subscribers.
            </summary>
            <param name="task">Task data</param>
        </member>
        <member name="T:CMS.Newsletter.EmailQueueItem">
            <summary>
            EmailQueueItem data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.EmailQueueItem.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueItem.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueItem.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueItem.#ctor">
            <summary>
            Constructor - Creates an empty EmailQueueItem object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueItem.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailQueueItem object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueItem.EmailID">
            <summary>
            EmailID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueItem.EmailNewsletterIssueID">
            <summary>
            EmailNewsletterIssueID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueItem.EmailSubscriberID">
            <summary>
            EmailSubscriberID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueItem.EmailSiteID">
            <summary>
            E-mail site ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueItem.EmailLastSendResult">
            <summary>
            EmailLastSendResult.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueItem.EmailLastSendAttempt">
            <summary>
            EmailLastSendAttempt.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueItem.EmailSending">
            <summary>
            EmailSending.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueItem.EmailGUID">
            <summary>
            E-mail GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueItem.EmailUserID">
            <summary>
            EmailUserID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueItem.EmailContactID">
            <summary>
            EmailContactID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueItem.EmailAddress">
            <summary>
            EmailAddress.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.EmailQueueManager">
            <summary>
            Class providing EmailQueueItem management.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.GetEmailQueueItem(System.Int32)">
            <summary>
            Returns the EmailQueueItem structure for the specified emailQueueItem.
            </summary>
            <param name="emailQueueItemId">EmailQueueItem id</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.GetEmailQueueItems(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets a dataset with EmailQueueItem records that meet specified requirements.
            </summary>
            <param name="where">A filter for collection</param>
            <param name="orderby">Ordering expression</param>
            <param name="topN">Number of objects to retrieve</param>
            <param name="columns">An expression containing the columns to retrieve</param>
            <returns>A DataSet containing records from newsletter queue</returns>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.GetEmailQueueItemsCount(System.Int32)">
            <summary>
            Gets number of e-mails in newsletter queue for specified issue.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.SetEmailQueueItem(CMS.Newsletter.EmailQueueItem)">
            <summary>
            Sets (updates or inserts) specified emailQueueItem.
            </summary>
            <param name="emailQueueItem">EmailQueueItem to set</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.DeleteEmailQueueItem(System.Int32)">
            <summary>
            Deletes emailQueueItem specified by ID.
            </summary>
            <param name="emailQueueItemId">EmailQueueItem ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.DeleteEmailQueueItem(CMS.Newsletter.EmailQueueItem)">
            <summary>
            Deletes specified emailQueueItem.
            </summary>
            <param name="emailQueueItem">EmailQueueItem object</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.DeleteEmailQueueItems(System.String)">
            <summary>
            Deletes email queue items based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.DeleteAllEmailQueueItems(System.Int32)">
            <summary>
            Deletes all email queue items for given site.
            </summary>
            <param name="siteId">ID of the site</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.DeleteFailedEmailQueueItems(System.Int32)">
            <summary>
            Deletes all failed items from email queue for given site.
            </summary>
            <param name="siteId">ID of the site</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.SendAllEmails">
            <summary>
            Tries to send all e-mails in the newsletter queue (failed and new).
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.SendAllEmails(System.Boolean)">
            <summary>
            Tries to send new e-mails in the newsletter queue, failed e-mails sending depends on the setting.
            </summary>
            <param name="sendFailed">Send failed e-mails?</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.SendAllEmails(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Tries to send all e-mails in the newsletter queue.
            </summary>
            <param name="sendFailed">Send failed e-mails?</param>
            <param name="sendNew">Send new e-mails?</param>
            <param name="issueId">Issue ID (optional)</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.SendEmail(CMS.Newsletter.EmailQueueItem,CMS.Newsletter.NewsletterInfo,CMS.Newsletter.IssueInfo,CMS.Newsletter.EmailTemplateInfo,System.String,System.String,System.String)">
            <summary>
            Sends specified e-mail from the newsletter queue, successfully sent e-mail is deleted from the queue, failed e-mail is updated with ErrorMessage information.
            </summary>
            <param name="email">E-mail to be sent</param>
            <param name="newsletter">Newsletter object (optional)</param>
            <param name="issue">Issue object (optional)</param>
            <param name="template">Email template (optional)</param>
            <param name="appPath">Application path</param>
            <param name="siteName">Site name</param>
            <param name="siteDomain">Site domain</param>
            <returns>Returns true if e-mail has been successfully send</returns>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.SendEmail(CMS.Newsletter.EmailQueueItem,CMS.Newsletter.NewsletterInfo,CMS.Newsletter.IssueInfo,CMS.Newsletter.EmailTemplateInfo,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends specified e-mail from the newsletter queue, failed e-mail is updated with ErrorMessage information.
            </summary>
            <param name="email">E-mail to be sent</param>
            <param name="newsletter">Newsletter object (optional)</param>
            <param name="issue">Issue object (optional)</param>
            <param name="template">Email template (optional)</param>
            <param name="appPath">Application path</param>
            <param name="siteName">Site name</param>
            <param name="siteDomain">Site domain</param>
            <param name="deleteSent">Indicates if successfully sent e-mail should be deleted from the newsletter queue</param>
            <returns>Returns true if e-mail has been successfully send</returns>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.ResendEmail(System.Int32)">
            <summary>
            Sends specified e-mail, successfully sent e-mail is deleted from the queue, failed e-mail is updated with ErrorMessage information.
            </summary>
            <param name="emailId">ID of e-mail to send</param>
            <returns>Returns true if e-mail has been successfully send</returns>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.ClearEmailsSendingStatus">
            <summary>
            Clears the sending status for the corrupted e-mails.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.ClearEmailsSendingStatusInternal">
            <summary>
            Clears the sending status for the corrupted e-mails.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.FetchEmailsToSend(System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Fetches the e-mails which should be sent from database and marks them as being sent.
            </summary>
            <param name="fetchFailed">If true, failed e-mails are fetched</param>
            <param name="fetchNew">If true, new e-mails are fetched</param>
            <param name="firstEmailId">First e-mail ID (all e-mails should have the same or larger ID)</param>
            <param name="issueId">If set, only e-mails of specified issue will be fetched</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.FetchEmailsToSend(System.Boolean,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Fetches the e-mails which should be sent from database and marks them as being sent.
            If enabled all e-mails with status 'sending' which have EmailID smaller then or equal to 'firstEmailId' will be deleted.
            </summary>
            <param name="fetchFailed">If true, failed e-mails are fetched</param>
            <param name="fetchNew">If true, new e-mails are fetched</param>
            <param name="firstEmailId">First e-mail ID (all e-mails should have the same or larger ID)</param>
            <param name="issueId">If set, only e-mails of specified issue will be fetched</param>
            <param name="deleteSentEmails">If true, e-mails fetched and sent in previous round are deleted</param>
            <param name="topN">Number of e-mails to fetch</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.FetchVariantEmailsToSend(System.Boolean,System.Boolean,System.Guid,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Fetches the variant e-mails which should be sent from database and marks them as being sent.
            If enabled all e-mails with status 'sending' which have EmailGUID smaller then or equal to 'firstEmailGuid' will be deleted.
            </summary>
            <param name="fetchFailed">If true, failed e-mails are fetched</param>
            <param name="fetchNew">If true, new e-mails are fetched</param>
            <param name="firstEmailGuid">First e-mail GUID (all e-mails should have the same or larger GUID)</param>
            <param name="issueId">If set, only e-mails of specified issue will be fetched</param>
            <param name="deleteSentEmails">If true, e-mails fetched and sent in previous round are deleted</param>
            <param name="topN">Number of e-mails to fetch</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.FetchEmailsToSendInternal(System.Boolean,System.Boolean,System.Int32,System.Guid,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Fetches the e-mails which should be sent from database and marks them as being sent.
            If enabled all e-mails with status 'sending' which have EmailID smaller then or equal to 'firstEmailId' will be deleted.
            </summary>
            <param name="fetchFailed">If true, failed e-mails are fetched</param>
            <param name="fetchNew">If true, new e-mails are fetched</param>
            <param name="firstEmailId">First e-mail ID (all e-mails should have the same or larger ID)</param>
            <param name="firstEmailGuid">First e-mail GUID (all e-mails should have the same or larger GUID)</param>
            <param name="issueId">If set, only e-mails of specified issue will be fetched</param>
            <param name="deleteSentEmails">If true, e-mails fetched and sent in previous round are deleted</param>
            <param name="topN">Number of e-mails to fetch</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.GenerateEmails(System.Int32)">
            <summary>
            Generates emails of given issue into e-mail queue.
            </summary>
            <param name="issueID">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.GenerateEmails(CMS.Newsletter.IssueInfo)">
            <summary>
            Generates e-mails of given issue into e-mail queue.
            </summary>
            <param name="issue">Issue object</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.GenerateEmails(CMS.Newsletter.IssueInfo,CMS.Newsletter.SubscriberInfo)">
            <summary>
            Generates e-mails of given issue into newsletter queue.
            </summary>
            <param name="issue">Issue</param>
            <param name="subscriber">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.GenerateBasicEmails(CMS.Newsletter.IssueInfo,System.Boolean,System.Int32)">
            <summary>
            Generates e-mails for classic subscribers, users and roles subscribed to given issue.
            </summary>
            <param name="issue">Issue object</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.GenerateContactEmails(CMS.Newsletter.IssueInfo,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Generates e-mails from subscribed contact groups and contacts of given issue into e-mail queue.
            </summary>
            <param name="issue">Issue object</param>
            <param name="siteId">Site ID</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.FillContactTable(System.Data.DataTable,CMS.Newsletter.IssueInfo,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Fills given table with contact data from subscribed contacts and contact groups.
            </summary>
            <param name="table">Data table</param>
            <param name="issue">Issue object</param>
            <param name="siteId">Site ID</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.FillContactGroupTable(System.Data.DataTable,CMS.Newsletter.IssueInfo,System.Boolean,System.Int32,System.Int32,System.Int32,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Fills given table with contact data from specified contact group.
            </summary>
            <param name="table">Data table</param>
            <param name="issue">Issue object</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
            <param name="contactGroupId">Contact group ID</param>
            <param name="subscriberId">Subscriber ID</param>
            <param name="currentEmails">Hash table with emails that have been already added</param>
            <param name="setSending">Indicate if new records should be set with 'sending' status</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.FillRoleTable(System.Data.DataTable,CMS.Newsletter.IssueInfo,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills given table with user data from specified role.
            </summary>
            <param name="table">Data table</param>
            <param name="issue">Issue object</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
            <param name="roleId">Role ID</param>
            <param name="subscriberId">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.GenerateDynamicIssue(System.Int32)">
            <summary>
            Generates issue of given dynamic newsletter based on the page defined by NewsletterDynamicURL.
            </summary>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.GetTitleFromHTML(System.String)">
            <summary>
            Returns title (text between 'title' tags) of given html page.
            </summary>
            <param name="htmlPage">Source code of html page</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.GetIssueTextFromURL(System.String)">
            <summary>
            Returns source code of html page specified by newsletterDynamicURL.
            </summary>
            <param name="dynamicNewsletterUrl">Url of page to procces</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.EnsureNewsletterObjects(CMS.Newsletter.EmailQueueItem,CMS.Newsletter.NewsletterInfo@,CMS.Newsletter.IssueInfo@,CMS.Newsletter.EmailTemplateInfo@)">
            <summary>
            Ensures necessary newsletter objects.
            </summary>
            <param name="email">Email message</param>
            <param name="newsletter">Newsletter</param>
            <param name="issue">Issue</param>
            <param name="template">Newsletter email template</param>
            <returns>true, when all necessary objects are initialized, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.EnsureSiteAndDomainNames(CMS.Newsletter.NewsletterInfo,System.String@,System.String@)">
            <summary>
            Ensures site and domain names.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="siteName">Site name</param>
            <param name="domainName">Domain name</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.AttachMetafilesToEmail(System.Int32,System.Int32,CMS.EmailEngine.EmailMessage)">
            <summary>
            Attaches metafiles to email message.
            </summary>
            <param name="templateId">Newsletter template ID</param>
            <param name="issueId">Issue ID</param>
            <param name="message">Email message</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.AttachMetafilesToEmail(System.Int32,CMS.Newsletter.IssueInfo,CMS.EmailEngine.EmailMessage)">
            <summary>
            Attaches metafiles to email message.
            </summary>
            <param name="templateId">Newsletter template ID</param>
            <param name="issue">Issue</param>
            <param name="message">Email message</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.EnsureMetafiles(CMS.Newsletter.IssueInfo,System.Int32)">
            <summary>
            Retrieves metafiles for given newsletter issue and template. Files are cached for faster access during sending.
            </summary>
            <param name="issue">Newsletter issue</param>
            <param name="templateId">Newsletter template ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.SetSender(CMS.EmailEngine.EmailMessage,CMS.Newsletter.NewsletterInfo,CMS.Newsletter.IssueInfo,System.String,System.Boolean)">
            <summary>
            Sets the newsletter sender email addresses.
            </summary>   
            <param name="message">E-mail message</param>
            <param name="newsletter">Newsletter</param>
            <param name="issue">Issue</param>
            <param name="siteName">Site name</param>
            <param name="checkBounces">Indicates if bounces should be checked if allowed in the Settings</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.AddIDFields(CMS.EmailEngine.EmailMessage,CMS.Newsletter.IssueInfo,CMS.Newsletter.SubscriberInfo,System.Int32,System.String)">
            <summary>
            Adds identification fields to e-mail header that can be used to trace newsletter e-mails.
            </summary>
            <param name="message">E-mail message</param>
            <param name="issue">Issue</param>
            <param name="subscriber">Source subscriber</param>
            <param name="memberId">Member ID - UserID for role subscriber and ContactID for contact group subscriber</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletter.EmailQueueManager.EnsureSenderLength(System.String,System.String)">
            <summary>
            Ensures that newsletter sender address does not exceeds 250 characters.
            </summary>
            <param name="senderString">Address in the form 'name &lt;email&gt;'</param>
            <param name="senderEmail">Email address</param>
        </member>
        <member name="P:CMS.Newsletter.EmailQueueManager.EncodingRegExp">
            <summary>
            Gets page encoding regular expression.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.EmailTemplateInfo">
            <summary>
            EmailTemplate data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.EmailTemplateInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfo.#ctor">
            <summary>
            Constructor - Creates an empty EmailTemplate object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailTemplate object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfo.CheckPermissions(CMS.SettingsProvider.PermissionsEnum,System.String,CMS.SettingsProvider.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateID">
            <summary>
            TemplateID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateStylesheetText">
            <summary>
            Template stylesheet text.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateType">
            <summary>
            TemplateType.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateBody">
            <summary>
            TemplateBody.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateName">
            <summary>
            TemplateName.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateHeader">
            <summary>
            TemplateHeader.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateFooter">
            <summary>
            TemplateFooter.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateDisplayName">
            <summary>
            TemplateDisplayName.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateSiteID">
            <summary>
            TemplateSiteID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateGUID">
            <summary>
            Template GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateSubject">
            <summary>
            Template subject.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.EmailTemplateInfo.TemplateThumbnailGUID">
            <summary>
            Thumbnail from metafiles (GUID).
            </summary>
        </member>
        <member name="T:CMS.Newsletter.EmailTemplateInfoProvider">
            <summary>
            Class providing EmailTemplate management.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.GetEmailTemplateInfo(System.Int32)">
            <summary>
            Gets the e-mail template.
            </summary>
            <param name="templateId">Template ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.GetEmailTemplateInfo(System.String,System.Int32)">
            <summary>
            Gets the e-mail template.
            </summary>
            <param name="templateName">Template code name</param>
            <param name="siteId">Template site ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.SetEmailTemplateInfo(CMS.Newsletter.EmailTemplateInfo)">
            <summary>
            Sets (updates or inserts) specified e-mail template.
            </summary>
            <param name="emailTemplate">Template object</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.DeleteEmailTemplateInfo(CMS.Newsletter.EmailTemplateInfo)">
            <summary>
            Deletes specified e-mail template.
            </summary>
            <param name="emailTemplate">Template object</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.DeleteEmailTemplateInfo(System.Int32)">
            <summary>
            Deletes specified e-mail template.
            </summary>
            <param name="emailTemplateId">Template ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.GetEmailTemplates(System.String,System.String)">
            <summary>
            Returns all e-mail templates.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.GetEmailTemplates(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns all e-mail templates.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Specifies number of returned records</param>
            <param name="columns">Data columns to return</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.GetAllSubscriptionTemplates(System.Int32)">
            <summary>
            Returns dataset with all subscription templates.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.GetAllUnsubscriptionTemplates(System.Int32)">
            <summary>
            Returns dataset with all unsubscription templates.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.GetAllDoubleOptInTemplates(System.Int32)">
            <summary>
            Returns dataset with all double opt-in templates.
            </summary>
            <param name="siteId">ID of a site</param>
            <returns>DataSet with double opt-in templates</returns>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.GetAllIssueTemplates(System.Int32)">
            <summary>
            Returns dataset with all e-mail templates.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.GetStylesheetUrl(System.String)">
            <summary>
            Returns virtual path to the template's stylesheet.
            </summary>
            <param name="codeName">CSS stylesheet code name</param>
        </member>
        <member name="M:CMS.Newsletter.EmailTemplateInfoProvider.Clear(System.Boolean)">
            <summary>
            Clears the hashtables.
            </summary>
            <param name="logTasks">If true, the clear tasks are logged</param>
        </member>
        <member name="T:CMS.Newsletter.IssueInfo">
            <summary>
            Issue data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueInfo.TYPEINFOVARIANT">
            <summary>
            Additional info for A/B test issue
            </summary>
        </member>
        <member name="M:CMS.Newsletter.IssueInfo.#ctor">
            <summary>
            Constructor - Creates an empty Issue object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.IssueInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new Issue object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.IssueInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.IssueInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.IssueInfo.CheckPermissions(CMS.SettingsProvider.PermissionsEnum,System.String,CMS.SettingsProvider.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfo.InsertAsCloneInternal(CMS.SettingsProvider.CloneSettings,CMS.SettingsProvider.CloneResult,CMS.SettingsProvider.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueUnsubscribed">
            <summary>
            IssueUnsubscribed.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueText">
            <summary>
            IssueText.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueSubject">
            <summary>
            IssueSubject.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueID">
            <summary>
            IssueID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueSentEmails">
            <summary>
            IssueSentEmails.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueTemplateID">
            <summary>
            IssueTemplateID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueNewsletterID">
            <summary>
            IssueNewsletterID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueSiteID">
            <summary>
            Issue site ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueMailoutTime">
            <summary>
            IssueMailoutTime.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueShowInNewsletterArchive">
            <summary>
            IssueShowInNewsletterArchive.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueGUID">
            <summary>
            Issue GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueOpenedEmails">
            <summary>
            Gets or sets the number of opened e-mails by subscribers with this newsletter issue.
            </summary>
            <value>The total nuber of opened e-mails containing this issue of newsletter. Default is 0</value>        
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueBounces">
            <summary>
            Gets or sets the number of bounced e-mails for this issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueStatus">
            <summary>
            Gets or sets the status for this issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueIsABTest">
            <summary>
            A/B test flag, set to TRUE for main A/B test issue and its variants.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueVariantOfIssueID">
            <summary>
            ID of parent issue (in case of A/B testing)
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueVariantName">
            <summary>
            Name of the A/B test variant.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueSenderName">
            <summary>
            Sender user-friendly name.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueSenderEmail">
            <summary>
            Sender e-mail address.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueScheduledTaskID">
            <summary>
            Gets or sets ID of scheduled task for sending issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.IssueIsVariant">
            <summary>
            Gets if the issue is variant of an A/B test issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.ABTestVariants">
            <summary>
            Collection of all A/B test variants of the main newsletter issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueInfo.SupportsVersioning">
            <summary>
            Indicates if the object versioning is supported.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.IssueHelper">
            <summary>
            Issue helper class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.MacroEmail">
            <summary>
            Dynamic field macro for subscriber email.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.MacroE_mail">
            <summary>
            Dynamic field macro for subscriber e-mail (used for compatibility with previous version).
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.MacroFirstName">
            <summary>
            Dynamic field macro for subscriber first name.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.MacroLastName">
            <summary>
            Dynamic field macro for subscriber last name.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.MacroUnsubscribeLink">
            <summary>
            Dynamic field macro for unsubscribe link.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.MacroActivationLink">
            <summary>
            Dynamic field - double opt-in activation link.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.SUBSCRIBERRESOLVERNAME">
            <summary>
            Name of the resolver which is used in second round for subscriber and context macros
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.NEWSLETTERISSUERESOLVERNAME">
            <summary>
            Name of the resolver which is used in first round for newsletter and issue macros
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.mEditableRegionRegExp">
            <summary>
            Regular expression to search the editable region macro.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.regionsContents">
            <summary>
            Editable regions hash table.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.dynamicFields">
            <summary>
            Dynamic fields hash table.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.mResolver">
            <summary>
            Macro resolver
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.mCulture">
            <summary>
            Newsletter's culture
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.mSiteName">
            <summary>
            Site name
            </summary>
        </member>
        <member name="F:CMS.Newsletter.IssueHelper.mBaseUrl">
            <summary>
            Base URL used for resolving
            </summary>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.LoadRegionsContents(System.String)">
            <summary>
            Loads values of editable regions into hashtable.
            </summary>
            <param name="text">Issue text</param>
            <returns>true if the loading was successful, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.LoadRegionsContents(System.Collections.Hashtable@,System.String)">
            <summary>
            Loads values of editable regions into hashtable.
            </summary>
            <param name="regions">Hashtable containing regions and their text</param>
            <param name="text">Issue text</param>
            <returns>true if the loading was successful, otherwise false</returns>        
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.ResolveEditableRegionMacros(System.String)">
            <summary>
            Resolves the editable region macros, replaces the $$editableregionname:width:height$$ macro with the editable region value.
            </summary>
            <param name="text">Text containing editable regions to resolve</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.LoadDynamicFields(CMS.Newsletter.SubscriberInfo,CMS.Newsletter.NewsletterInfo,CMS.Newsletter.SubscriberNewsletterInfo,CMS.Newsletter.IssueInfo,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Loads values of dynamic fields into hashtable.
            </summary>
            <param name="subscriber">Subscriber</param>
            <param name="newsletter">Newsletter</param>
            <param name="subscription">SubscriberNewsletterInfo object representing subscription (optional)</param>
            <param name="issue">Newsletter issue</param>
            <param name="previewOnly">True if issue is in preview mode, otherwise false</param>
            <param name="siteName">Site name</param>
            <param name="domainName">Domain name</param>
            <param name="webApplicationVirtualPath">Web application virtual path</param>
            <param name="appPath">Application path</param>
            <returns>Returns true if loading was successfull, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.ResolveDynamicFieldMacros(System.String)">
            <summary>
            Resolves the dynamic field macros, replaces the {%dynamicfieldname%} macro with the dynamic field value.
            </summary>
            <param name="text">Text containing dynamic fields to resolve</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.GetBaseUrl(CMS.Newsletter.NewsletterInfo,System.String,System.String,System.String)">
            <summary>
            Creates a base URL for resolution using the specified path information.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="domainName">Domain name</param>
            <param name="webApplicationVirtualPath">Virtual path where web application is rooted</param>
            <param name="appPath">Application path</param>
            <returns>Base URL to use for resolution</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.GetContentXML(System.String[])">
            <summary>
            Returns content of editable regions as XML.
            </summary>
            <param name="regions">Content of each region (if NULL "empty" XML is returned).</param>
            <remarks>Region content starts with region ID which is separated with '::' from the rest</remarks>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.GetStatusFriendlyName(CMS.Newsletter.IssueStatusEnum,System.String)">
            <summary>
            Returns issue status friendly name.
            </summary>
            <param name="status">Issue status</param>
            <param name="resPrefix">Resource string prefix (if NULL default prefix will be used)</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.EnableVariantScheduledTasks(CMS.Newsletter.IssueInfo)">
            <summary>
            Enables all scheduled tasks associated to all variants of parent issue.
            </summary>
            <param name="parentIssue">Parent (original) issue</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.EnsureWinnerSelectionTask(CMS.Newsletter.ABTestInfo,CMS.Newsletter.IssueInfo,System.Boolean)">
            <summary>
            Ensures that the winner selection task is created or updated (or deleted) according to A/B test info.
            </summary>
            <param name="abi">A/B test info</param>
            <param name="parentIssue">Parent issue (optional)</param>
            <param name="enableTask">Enable scheduled task</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.EnsureWinnerSelectionTask(CMS.Newsletter.ABTestInfo,CMS.Newsletter.IssueInfo,System.Boolean,System.DateTime)">
            <summary>
            Ensures that the winner selection task is created or updated (or deleted) according to A/B test info.
            Start time of winner selection task is calculated according to A/B test setting and highest mailout time of the variant.
            </summary>
            <param name="abi">A/B test info</param>
            <param name="parentIssue">Parent issue (optional)</param>
            <param name="enableTask">Enable scheduled task</param>
            <param name="highestMailoutTime">Highest mailout time (mailout time of the last variant)</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.InitABTestNumbers(System.Int32)">
            <summary>
            Initializes number of e-mails that should be sent for each variant.
            </summary>
            <param name="parentId">ID of A/B test parent issue</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.GetNumberPerVariantEmails(CMS.Newsletter.ABTestInfo)">
            <summary>
            Returns number of e-mails to be sent to a variant of specified A/B test.
            </summary>
            <param name="abi">A/B test info</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.GetWinnerIssue(CMS.Newsletter.IssueInfo,CMS.Newsletter.ABTestInfo)">
            <summary>
            Returns A/B test winner.
            </summary>
            <param name="parentIssue">Parent issue</param>
            <param name="abi">A/B test info</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.GetIssueTotalUniqueClicks(System.Int32)">
            <summary>
            Returns number of unique clicks of all issue's links.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.CopyIssueProperties(CMS.Newsletter.IssueInfo,CMS.Newsletter.IssueInfo,System.String)">
            <summary>
            Copies specified properties from source issue to target issue.
            </summary>
            <param name="srcIssue">Source issue</param>
            <param name="dstIssue">Target issue</param>
            <param name="properties">List of properties (columns) that should be copied separated by semicolon</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.GetIssueVariants(System.Int32,System.String)">
            <summary>
            Returns issue variants for specified issue ID if any.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="additionalWhereCondition">Additional WHERE condition</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.GetIssueVariants(CMS.Newsletter.IssueInfo,System.String)">
            <summary>
            Returns issue variants for specified issue if any.
            </summary>
            <param name="issue">Issue</param>
            <param name="additionalWhereCondition">Additional WHERE condition</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.GetScheduledMailoutTask(CMS.Newsletter.IssueInfo,CMS.Newsletter.NewsletterInfo,System.Boolean)">
            <summary>
            Returns scheduled mailout task for the given issue or creates new one.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter</param>
            <param name="taskEnabled">Determines whether the newly created task will be enabled</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.FillWithPreviewValues(CMS.Newsletter.SubscriberInfo)">
            <summary>
            When running in preview mode or subscriber is unknown, fills the hashtables with subscriber's values, but makes links inactive.
            </summary>
            <param name="subscriber">Subscriber</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.FillWithRoleSubscriberValues(CMS.Newsletter.SubscriberInfo)">
            <summary>
            When subscriber is of role or contact group type, fills the hashtables with subscriber values, but makes links blank.
            </summary>
            <param name="subscriber">Subscriber</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.FillWithSubscriberData(CMS.Newsletter.SubscriberInfo,CMS.Newsletter.NewsletterInfo,CMS.Newsletter.SubscriberNewsletterInfo,CMS.Newsletter.IssueInfo,System.String)">
            <summary>
            Fills the hashtable with values for a given subscriber.
            </summary>
            <param name="subscriber">Subscriber</param>
            <param name="newsletter">Newsletter</param>
            <param name="subscription">Subscription binding</param>
            <param name="issue">Issue</param>
            <param name="baseUrl">Base URL to use when creating activation and unsubscription links</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.FillBaseSubscriberData(CMS.Newsletter.SubscriberInfo,System.Boolean)">
            <summary>
            Fills the hashtable with basic values of a subscriber (email, first and last names).
            </summary>
            <param name="subscriber">Subscriber</param>
            <param name="encodeName">If TRUE subscriber first and last names are encoded - this is used in preview.</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.CreateInactiveUnsubscriptionLink">
            <summary>
            Creates inactive/disabled unsubscription link to use as a placeholder.
            </summary>
            <returns>Inactive unsubscription link</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.CreateInactiveActivationLink">
            <summary>
            Creates inactive/disabled activation link to use as a placeholder.
            </summary>
            <returns>Inactive activation link</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.FillUnsubscriptionLink(CMS.Newsletter.SubscriberInfo,CMS.Newsletter.NewsletterInfo,CMS.Newsletter.SubscriberNewsletterInfo,CMS.Newsletter.IssueInfo,System.String)">
            <summary>
            Fills unsubscription link dynamic field for a given subscriber.
            </summary>
            <param name="subscriber">Subscriber</param>
            <param name="newsletter">Newsletter</param>
            <param name="subscription">Subscription binding</param>
            <param name="issue">Issue</param>
            <param name="unsubscriptionPage">Resolved unsubscription page</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.FillActivationLink(CMS.Newsletter.SubscriberNewsletterInfo,System.String,CMS.Newsletter.NewsletterInfo,CMS.Newsletter.SubscriberInfo)">
            <summary>
            Fills activation link dynamic fields for a given subscriber.
            </summary>
            <param name="subscription">Subscription</param>
            <param name="activationPage">Resolved activation page</param>
            <param name="newsletter">Newsletter object.</param>
            <param name="subscriber">Subscriber object.</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.GetActivationPage(CMS.Newsletter.NewsletterInfo,System.String)">
            <summary>
            Retrieves activation page for a specified newsletter.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="baseUrl">Base URL to use for resolution</param>
            <returns>Complete URL to activation page</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.GetUnsubscriptionPage(CMS.Newsletter.NewsletterInfo,System.String)">
            <summary>
            Retrieves unsubscription page for a specified newsletter.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="baseUrl">Base URL to use for resolution</param>
            <returns>Complete URL to unsubscription page</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.EnsureBaseUrl(CMS.Newsletter.NewsletterInfo,System.String,System.String,System.String)">
            <summary>
            Returns base URL from global variable or creates new one.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="domainName">Domain name</param>
            <param name="webApplicationVirtualPath">Virtual path where web application is rooted</param>
            <param name="appPath">Application path</param>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.PrepareLink(System.String,System.String)">
            <summary>
            Combines base and relative URLs.
            </summary>
            <param name="linkUrl">URL of the link to be added after base URL</param>
            <param name="baseUrl">Base URL with domain</param>
            <returns>Returns combined URLs</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.AddTrackingLinks(System.String,CMS.Newsletter.IssueInfo,CMS.Newsletter.NewsletterInfo,System.String)">
            <summary>
            Converts links in text to tracking links and inserts a web beacon (if tracking is enabled).
            </summary>
            <param name="text">Issue text</param>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter</param>
            <param name="domainName">Domain name</param>
            <returns>Transformed issue text</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueHelper.InjectTrackingImage(System.String,CMS.Newsletter.IssueInfo,System.String)">
            <summary>
            Injects a tracking image at the end of the issue text.
            </summary>
            <param name="text">Text where the web beacon will be inserted</param>
            <param name="issue">Issue to track</param>
            <param name="domainName">Domain name to use when resolving the URL</param>
            <returns>Text containing a generic web bug</returns>
        </member>
        <member name="P:CMS.Newsletter.IssueHelper.Resolver">
            <summary>
            Macro resolver.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueHelper.EditableRegionRegExp">
            <summary>
            Editable region macro regular expression.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.IssueHelper.Culture">
            <summary>
            Returns default culture of the newsletter's site.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.IssueInfoProvider">
            <summary>
            Class providing Issue management.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetIssueInfo(System.Int32)">
            <summary>
            Returns the issue with specified ID.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetIssueInfo(System.Guid,System.Int32)">
            <summary>
            Returns the issue with specified GUID.
            </summary>
            <param name="issueGuid">Issue GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetIssues(System.String,System.String)">
             <summary>
             Returns a dataset with issues specified by parameters.
             </summary>
            <param name="where">WHERE expression</param>
            <param name="orderBy">ORDER BY expression</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetIssues(System.String,System.String,System.Int32,System.String)">
             <summary>
             Returns a dataset with issues specified by parameters.
             </summary>
            <param name="where">WHERE expression</param>
            <param name="orderBy">ORDER BY expression</param>
            <param name="topN">TOP N expression</param>
            <param name="columns">Columns paramenter</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.IsABTestIssue(System.Int32)">
            <summary>
            Checks if issue is A/B test (parent issue or its variant).
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetOriginalIssue(System.Int32)">
            <summary>
            Returns original (parent) issue for specified issue ID.
            </summary>
            <param name="issueId">Issue ID (either variant issue or parent</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SetIssueInfo(CMS.Newsletter.IssueInfo)">
            <summary>
            Sets (updates or inserts) specified issue.
            </summary>
            <param name="issue">Issue to set</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.DeleteIssueInfo(CMS.Newsletter.IssueInfo)">
            <summary>
            Deletes issue.
            </summary>
            <param name="issueObj">Issue</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.DeleteIssueInfo(System.Int32)">
            <summary>
            Deletes issue specified by ID.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.AddSentEmails(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Increases the sent emails count in the issue specified.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="emails">Number of sent emails to add</param>
            <param name="mailoutTime">Time when the e-mails were sent</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SendConfirmationEmail(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sends e-mail to confirm subscription/unsubscription of subscriber to newsletter.
            </summary>
            <param name="isSubscriptionEmail">True if the message is subscription confirmation, false if unsubscription confirmation</param>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SendDoubleOptInEmail(System.Int32,System.Int32)">
            <summary>
            Sends double opt-in e-mail to confirm subscription.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SendIssue(System.Int32)">
            <summary>
            Send e-mails based on issue to all subscribers.
            </summary>
            <param name="issueID">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SendIssue(System.Int32,System.DateTime)">
            <summary>
            Sends e-mails based on issue to all subscribers at the specified time.
            </summary>
            <param name="issueID">Issue ID</param>
            <param name="when">Time when to send the issue</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SendIssue(CMS.Newsletter.IssueInfo,System.DateTime)">
            <summary>
            Sends e-mails based on issue to all subscribers at the specified time.
            </summary>
            <param name="issue">Issue</param>
            <param name="when">Time when to send the issue</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SendIssue(CMS.Newsletter.IssueInfo,CMS.Newsletter.SubscriberInfo)">
            <summary>
            Sends e-mail based on the issue to the specified subscriber.
            </summary>
            <param name="issue">Issue</param>
            <param name="subscriber">Subscriber</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SendIssue(System.Int32,System.String)">
            <summary>
            Send e-mails based on issue to given recipients.
            </summary>
            <param name="issueID">Issue ID</param>
            <param name="recipients">Semicolon separated list of recipients' email addresses</param>        
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetEmailBody(CMS.Newsletter.IssueInfo,CMS.Newsletter.NewsletterInfo,CMS.Newsletter.EmailTemplateInfo,CMS.Newsletter.SubscriberInfo,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Merges issue text with template to create e-mail body and resolves macros with their values.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter (optional)</param>
            <param name="template">Email template (optional)</param>
            <param name="subscriber">Subscriber (optional)</param>
            <param name="previewOnly">True when the message is in preview mode</param>
            <param name="siteName">Site name (optional)</param>
            <param name="domain">Domain (optional)</param>
            <param name="appPath">Application path (optional)</param>
            <param name="webFullUrl">Web full url (optional)</param>
            <returns>Issue e-mail body</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetEmailBody(CMS.Newsletter.IssueInfo,CMS.Newsletter.NewsletterInfo,CMS.Newsletter.SubscriberNewsletterInfo,CMS.Newsletter.EmailTemplateInfo,CMS.Newsletter.SubscriberInfo,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Merges issue text with template to create e-mail body and resolves macros with their values.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter (optional)</param>
            <param name="subscription">Subscription information (optional)</param>
            <param name="template">Email template (optional)</param>
            <param name="subscriber">Subscriber object (optional)</param>
            <param name="previewOnly">True when the message is in preview mode</param>
            <param name="siteName">Site name (optional)</param>
            <param name="domain">Domain (optional)</param>
            <param name="appPath">Application path (optional)</param>
            <param name="webFullUrl">Web full url (optional)</param>
            <returns>Issue e-mail body</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.Unsubscribe(System.Int32)">
            <summary>
            Increases the counter for issue unsubscriptions.
            </summary>
            <param name="issueId">ID of the issue that has been unsubscribed</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.AddOpenedEmails(System.Int32)">
            <summary>
            Increases the opened emails count int the issue specified.
            </summary>
            <param name="issueId">ID of the issue</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.InvalidateIssue(System.Int32)">
            <summary>
            Invalidates cached newsletter issue on external change.
            </summary>
            <param name="issueId">ID of the issue to invalidate</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SetIssueStatus(System.Int32,CMS.Newsletter.IssueStatusEnum)">
            <summary>
            Set specified status to the issue.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="newStatus">New status</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.CreateMailoutTask(CMS.Newsletter.IssueInfo,CMS.Newsletter.NewsletterInfo,System.DateTime,System.Boolean)">
            <summary>
            Prepares scheduler TaskInfo object for an issue mailout.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter</param>
            <param name="when">Date and time when the task should be execured</param>
            <param name="taskEnabled">Creates enabled/disabled task</param>
            <returns>A scheduler task that represents an issue mailout</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.DeleteMailoutTask(System.Guid,System.Int32)">
            <summary>
            Removes scheduled mailout task for specified issue.
            </summary>
            <param name="guid">Issue GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.CreateMailoutTask(CMS.Newsletter.IssueInfo,CMS.Newsletter.NewsletterInfo,System.DateTime)">
            <summary>
            Creates an issue mailout task for scheduler.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter</param>
            <param name="when">Date and time when the task should be execured</param>
            <returns>A scheduler task that represents an issue mailout</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetTemplate(System.Boolean,System.Boolean,CMS.Newsletter.NewsletterInfo,System.String)">
            <summary>
            Gets a template for a specified type of confirmation e-mail message.
            </summary>        
            <param name="isOptIn">True if double opt-in e-mail should be sent, false for subscription/unsubscription e-mails</param>
            <param name="isSubscription">True if subscription e-mail should be sent, false, false is unsubscription e-mail should be sent</param>
            <param name="newsletter">Newsletter</param>
            <param name="culture">Culture string</param>
            <returns>Confirmation e-mail template</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetHeader(CMS.Newsletter.EmailTemplateInfo)">
            <summary>
            Gets a header from template with embedded or linked stylesheet.
            </summary>
            <param name="template">E-mail template</param>
            <returns>Header with stylesheet data</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SendConfirmation(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sends either double opt-in e-mail or subcsription/unsubscription confirmation e-mail.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="isOptIn">True if double opt-in e-mail should be sent, false for subscription/unsubscription e-mails</param>
            <param name="isSubscription">True if subscription e-mail should be sent, false, false is unsubscription e-mail should be sent</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetEmailBody(CMS.Newsletter.IssueInfo,CMS.Newsletter.EmailTemplateInfo)">
            <summary>
            Creates an email body by merging the template and issue text.
            </summary>
            <param name="issue">Issue</param>
            <param name="template">Newsletter email template for this issue</param>
            <returns>Email body with text common to all subscribers.</returns>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SendConfirmation(CMS.Newsletter.SubscriberInfo,CMS.Newsletter.NewsletterInfo,CMS.Newsletter.SubscriberNewsletterInfo,CMS.Newsletter.EmailTemplateInfo,System.String,System.String)">
            <summary>
            Sends either double opt-in e-mail or subcsription/unsubscription confirmation e-mail.
            </summary>
            <param name="subscriber">Subsciber</param>
            <param name="newsletter">Newsletter</param>
            <param name="subscription">Subscription information</param>
            <param name="template">Email template to use</param>
            <param name="siteName">Name of the site</param>
            <param name="culture">Culture string</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.OpenRate(CMS.Newsletter.IssueInfo)">
            <summary>
            Gets the open rate percentage for this issue (how many e-mails were open out of all sent e-mails).
            </summary>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetIssueInfoInternal(System.Int32)">
            <summary>
            Returns the issue with specified ID.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetIssueInfoInternal(System.Guid,System.Int32)">
            <summary>
            Returns the issue with specified GUID.
            </summary>
            <param name="issueGuid">Issue GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.GetIssuesInternal(System.String,System.String,System.Int32,System.String)">
             <summary>
             Returns a dataset with issues specified by parameters.
             </summary>
            <param name="where">WHERE expression</param>
            <param name="orderBy">ORDER BY expression</param>
            <param name="topN">TOP N expression</param>
            <param name="columns">Columns paramenter</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SetIssueInfoInternal(CMS.Newsletter.IssueInfo)">
            <summary>
            Sets (updates or inserts) specified issue.
            </summary>
            <param name="issue">Issue to set</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.DeleteIssueInfoInternal(CMS.Newsletter.IssueInfo)">
            <summary>
            Deletes issue.
            </summary>
            <param name="issueObj">Issue</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.RemoveObjectDependencies(CMS.Newsletter.IssueInfo)">
            <summary>
            Removes object dependencies.
            </summary>
            <param name="infoObj">Object for which the dependencies should be removed</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.AddSentEmailsInternal(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Increases the sent emails count in the issue specified.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="emails">Number of sent emails to add</param>
            <param name="mailoutTime">Time when the e-mails were sent</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.AddOpenedEmailsInternal(System.Int32)">
            <summary>
            Increases the opened emails count in the issue specified.
            </summary>
            <param name="issueId">ID of the issue</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.UnsubscribeInternal(System.Int32)">
            <summary>
            Increases the counter for issue unsubscriptions.
            </summary>
            <param name="issueId">ID of the issue that has been unsubscribed</param>
        </member>
        <member name="M:CMS.Newsletter.IssueInfoProvider.SetIssueStatusInternal(System.Int32,CMS.Newsletter.IssueStatusEnum)">
            <summary>
            Sets specified status to the issue.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="status">New status</param>
        </member>
        <member name="P:CMS.Newsletter.IssueInfoProvider.UseLinkedCSS">
            <summary>
            Determines whether "link" tag is used instead of "style" tag.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.LinkListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.LinkListInfo.#ctor">
            <summary>
            Constructor - Creates an empty LinkListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.LinkListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new LinkListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletter.LinkListInfo.GetData(CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result (not applied)</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>       
        </member>
        <member name="T:CMS.Newsletter.LinkTracker">
            <summary>
            Tracks subscribers who clicked on a link in a newsletter issue.
            </summary>
            <remarks>
            An e-mail containing a newsletter issue contains a modified link.
            This link contains a subscriber's guid and the guid of the newsletter link.
            A redirect to original URL is sent in response and the request is logged.
            </remarks>
        </member>
        <member name="F:CMS.Newsletter.LinkTracker.lockObj">
            <summary>
            Object for locking.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.LinkTracker.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes the tracking data and redirects request to original URL.
            </summary>
            <param name="context">An HttpContext associated with this request</param>
        </member>
        <member name="M:CMS.Newsletter.LinkTracker.GetLinkUrl">
            <summary>
            Retrieves the original URL given the arguments and logs the request.
            </summary>
            <returns>Original URL or null if not found</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkTracker.ResolveUrl(System.String,CMS.Newsletter.SubscriberInfo)">
            <summary>
            Resolves subscriber macros in the specified URL.
            </summary>
            <param name="url">URL containing subscriber macros</param>
            <param name="subscriber">Subscriber</param>
            <returns>Resolved URL</returns>
        </member>
        <member name="M:CMS.Newsletter.LinkTracker.LogActivity(CMS.Newsletter.LinkInfo,CMS.Newsletter.SubscriberInfo,CMS.Newsletter.IssueInfo,CMS.Newsletter.NewsletterInfo,System.String,System.Int32,System.Boolean)">
            <summary>
            Logs activity and returns subscriber's contact ID.
            </summary>
            <param name="link">Link</param>
            <param name="subscriber">Subscriber</param>
            <param name="issue">Newsletter issue</param>
            <param name="news">Newsletter</param>
            <param name="originalURL">Original URL</param>
            <param name="contactId">Contact ID is present if the mail is sent to a contact or a contact group</param>
            <param name="isContactGroup">Indicates if subscriber is from a contact group</param>
        </member>
        <member name="M:CMS.Newsletter.LinkTracker.OnLog(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Performs custom handling &amp; logging after a link was clicked.
            </summary>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="linkId">Link's ID</param>
            <param name="siteId">ID of the site</param>
            <param name="originalUrl">Original URL that is returned to the client</param>
            <param name="contactId">Contact's ID</param>
        </member>
        <member name="P:CMS.Newsletter.LinkTracker.IsReusable">
            <summary>
            Gets whether this handler can be reused for other request; always returns true.
            </summary>
            <value>Always true</value>
        </member>
        <member name="T:CMS.Newsletter.NewsletterInfo">
            <summary>
            Newsletter data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfo.InsertAsCloneInternal(CMS.SettingsProvider.CloneSettings,CMS.SettingsProvider.CloneResult,CMS.SettingsProvider.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfo.#ctor">
            <summary>
            Constructor - Creates an empty Newsletter object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new Newsletter object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfo.CheckPermissions(CMS.SettingsProvider.PermissionsEnum,System.String,CMS.SettingsProvider.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterTemplateID">
            <summary>
            Gets or sets the newsletter template ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterDynamicScheduledTaskID">
            <summary>
            Gets or sets the newsletter dynamic scheduled task ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterType">
            <summary>
            Gets or sets the newsletter type.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterSiteID">
            <summary>
            Gets or sets the newsletter site ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterName">
            <summary>
            Gets or sets the newsletter name.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterSubscriptionTemplateID">
            <summary>
            Gets or sets the newsletter subscription template ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterDynamicSubject">
            <summary>
            Gets or sets the subject of a dynamic newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterID">
            <summary>
            Gets or sets the newsletter ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterDisplayName">
            <summary>
            Gets or sets the newsletter display name.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterSenderName">
            <summary>
            Gets or sets the newsletter sender name.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterDynamicURL">
            <summary>
            Gets or sets the URL of a dynamic newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterSenderEmail">
            <summary>
            Gets or sets the e-mail addres of a newsletter sender.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterUnsubscriptionTemplateID">
            <summary>
            Gets or sets the newsletter unnsubscription template ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterUnsubscribeUrl">
            <summary>
            Gets or sets the newsletter unsubscription URL.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterBaseUrl">
            <summary>
            Gets or sets the newsletter base URL.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterGUID">
            <summary>
            Gets or sets the newsletter unique identifier.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterLastModified">
            <summary>
            Gets or sets the date and time the object was last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterUseEmailQueue">
            <summary>
            Gets or sets whether to use the e-mail queue.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterEnableOptIn">
            <summary>
            Gets or sets whether the newsletter should use double opt-in.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterOptInTemplateID">
            <summary>
            Gets or sets the ID of the template which will be used for double opt-in confirmation.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterSendOptInConfirmation">
            <summary>
            Gets or sets whether subscription confirmation should be sent after double opt-in e-mail.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterOptInApprovalURL">
            <summary>
            Gets or sets the URL of the double opt-in page.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterTrackOpenEmails">
            <summary>
            Gets or sets whether tracking of opened emails carrying newsletter issues is enabled.
            </summary>
            <value>A flag that determines if tracking is turned on for this newsletter. Default is false.</value>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterTrackClickedLinks">
            <summary>
            Gets or sets whether tracking of clicked links in newsletter issues is enabled.
            </summary>
            <value>A flag that determines if tracking is turned on for this newsletter. Default is false.</value>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterLogActivity">
            <summary>
            Gets or sets whether activities logging is enabled for this particular newsletter.
            </summary>
            <value>A flag that determines if activities logging is turned on for this newsletter. Default is false.</value>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterDraftEmails">
            <summary>
            Gets or sets the email addresses where draft emails are sent.
            </summary>
            <value>Semicolon separated list of email addresses.</value>
        </member>
        <member name="P:CMS.Newsletter.NewsletterInfo.NewsletterEnableResending">
            <summary>
            Gets or sets whether the newsletter issues may be resent. Default value is TRUE.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.NewsletterObjectType">
            <summary>
            Newsletter module object types.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.GROUP_NEWSLETTER">
            <summary>
            Polls object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTER">
            <summary>
            Code name for newsletters.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERTEMPLATE">
            <summary>
            Code name for newsletter email templates.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERISSUE">
            <summary>
            Code name for newsletter issues.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERISSUEVARIANT">
            <summary>
            Code name for newsletter A/B variants.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERSUBSCRIBER">
            <summary>
            Code name for newsletter standard subscribers.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERSUBSCRIBERLIST">
            <summary>
            Code name for newsletter subscribers list.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERUSERSUBSCRIBER">
            <summary>
            Code name for newsletter user specific subscribers.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERROLESUBSCRIBER">
            <summary>
            Code name for newsletter role specific subscribers.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERCONTACTGROUPSUBSCRIBER">
            <summary>
            Code name for newsletter contact group specific subscribers.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERCONTACTSUBSCRIBER">
            <summary>
            Code name for newsletter contact specific subscribers.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERLINK">
            <summary>
            Code name for newsletter links.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERLINKLIST">
            <summary>
            Code name for newsletter link list.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.EMAILQUEUEITEM">
            <summary>
            Email queue item.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.EMAILQUEUEITEMLIST">
            <summary>
            Email queue item list.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERSUBSCRIBERNEWSLETTER">
            <summary>
            Subscriber - newsletter binding used for subscriptions.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERSUBSCRIBERNEWSLETTERLIST">
            <summary>
            List of subscriber - newsletter bindings.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERSUBSCRIBERLINK">
            <summary>
            Subscriber - link binding used for tracking of clicked links.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERSUBSCRIBERLINKLIST">
            <summary>
            List of subscriber - link binding used for tracking of clicked links.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTEROPENEDEMAIL">
            <summary>
            Subscriber - issue binding used for tracking of opened emails.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTEROPENEDEMAILLIST">
            <summary>
            List of subscriber - issue binding used for tracking of opened emails.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTEREMAILTEMPLATENEWSLETTER">
            <summary>
            Newsletter - newsletter template binding.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterObjectType.NEWSLETTERABTEST">
            <summary>
            Newsletter - A/B test.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.NewsletterInfoProvider">
            <summary>
            Class providing Newsletter management.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.Clear(System.Boolean)">
            <summary>
            Clear hashtables.
            </summary>
            <param name="logTasks">If true, the clear tasks are logged</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetNewsletterInfo(System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterId">Newsletter id</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetNewsletterInfo(System.String,System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterName">NewsletterName</param>
            <param name="siteId">Site identifier</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetNewsletterInfo(System.Guid,System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterGuid">GUID of newsletter</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.SetNewsletterInfo(CMS.Newsletter.NewsletterInfo)">
            <summary>
            Sets (updates or inserts) specified newsletter.
            </summary>
            <param name="newsletter">Newsletter to set</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.DeleteNewsletterInfo(CMS.Newsletter.NewsletterInfo)">
            <summary>
            Deletes specified newsletter.
            </summary>
            <param name="newsletterObj">Newsletter object</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.DeleteNewsletterInfo(System.Int32)">
            <summary>
            Deletes specified newsletter.
            </summary>
            <param name="newsletterId">Newsletter id</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetNewsletters(System.String,System.String,System.Int32,System.String)">
             <summary>
             Returns dataset with all newsletters.
             </summary>
            <param name="where">WHERE expression</param>
            <param name="orderBy">ORDER BY expression</param>
            <param name="topN">Number of top items to be retrieved</param>
            <param name="columns">Columns</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetAllNewsletters">
            <summary>
            Returns dataset with all newsletters.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetAllNewslettersForSite(System.Int32)">
            <summary>
            Returns dataset with all newsletters of given site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetAllNewslettersForSite(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Returns dataset with all newsletters of given site.
            </summary>
            <param name="siteId">Site ID</param>
            <param name="orderBy">ORDER BY expression</param>
            <param name="topN">TOP N parameter</param>
            <param name="columns">Columns</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetEmailAddressCount(System.Int32,System.String)">
            <summary>
            Returns number of e-mail addresses of subscribers for the given newsletter.
            </summary>
            <param name="newsletterId">Newsletter</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetNewsletterInfoInternal(System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterId">Newsletter id</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetNewsletterInfoInternal(System.String,System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterName">NewsletterName</param>
            <param name="siteId">Site identifier</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetNewsletterInfoInternal(System.Guid,System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterGuid">GUID of newsletter</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.SetNewsletterInfoInternal(CMS.Newsletter.NewsletterInfo)">
            <summary>
            Sets (updates or inserts) specified newsletter.
            </summary>
            <param name="newsletter">Newsletter to set</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.DeleteNewsletterInfoInternal(CMS.Newsletter.NewsletterInfo)">
            <summary>
            Deletes specified newsletter.
            </summary>
            <param name="newsletterObj">Newsletter object</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.RemoveObjectDependencies(CMS.Newsletter.NewsletterInfo)">
            <summary>
            Removes object dependencies.
            </summary>
            <param name="infoObj">Object for which the dependencies should be removed</param>
        </member>
        <member name="M:CMS.Newsletter.NewsletterInfoProvider.GetNewslettersInternal(System.String,System.String,System.Int32,System.String)">
             <summary>
             Returns dataset with all newsletters.
             </summary>
            <param name="where">WHERE expression</param>
            <param name="orderBy">ORDER BY expression</param>
            <param name="topN">Number of top items to be retrieved</param>
            <param name="columns">Columns</param>
        </member>
        <member name="T:CMS.Newsletter.NewsletterType">
            <summary>
            Newsletter type enumeration.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterType.TemplateBased">
            <summary>
            Template-based (or static) newsletter type.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.NewsletterType.Dynamic">
            <summary>
            Dynamic newsletter type.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.OpenedEmailInfo">
            <summary>
            OpenedEmail data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.OpenedEmailInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfo.#ctor">
            <summary>
            Creates a new OpenedEmailInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new OpenedEmailInfo object from the specified DataRow.
            </summary>
            <param name="openedEmailRow">Raw values from DB table that represent this object</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfo.#ctor(CMS.Newsletter.OpenedEmailInfo,System.Boolean)">
            <summary>
            Creates a new OpenedEmailInfo object from the existing OpenedEmailInfo object.
            Copy constructor.
            </summary>
            <param name="openedEmailInfo">Original object to copy</param>
            <param name="keepSourceData">If true, the copy is shallow, otherwise a deep copy is created (all object's data is cloned)</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfo.DeleteObject">
            <summary>
            Deletes this OpenedEmailInfo object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfo.SetObject">
            <summary>
            Updates this OpenedEmailInfo object using appropriate provider.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.OpenedEmailInfo.IssueID">
            <summary>
            Gets or sets ID of the newsletter's issue.
            </summary>
            <value>
            Newsletter issue's ID, or 0 if not found.
            </value>        
        </member>
        <member name="P:CMS.Newsletter.OpenedEmailInfo.SubscriberID">
            <summary>
            Gets or sets subscriber's ID.
            </summary>
            <value>
            Subscriber's ID, or 0 if not found.
            </value>        
        </member>
        <member name="P:CMS.Newsletter.OpenedEmailInfo.OpenedWhen">
            <summary>
            Gets or sets the timestamp when the issue of the newsletter was opened by subscriber.
            </summary>
            <value>
            Timestamp or CMS.GlobalHelper.DateTimeHelper.ZERO_TIME if the issue was not read by the specified subscriber yet.
            </value>
        </member>
        <member name="T:CMS.Newsletter.OpenedEmailInfoProvider">
            <summary>
            Class providing OpenedEmailInfoProvider management.
            </summary>
            <remarks>
            Handles basic CRUD functionality over OpenedEmailInfo objects.
            </remarks>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.#ctor">
            <summary>
            Creates a new instance of OpenedEmailInfoProvider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.CreateInfo(System.Data.DataRow)">
            <summary>
            Creates a new GeneralizedInfo object.
            </summary>
            <param name="dr">Data to use to create new object</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.GetOpenedEmailInfo(System.Int32,System.Int32)">
            <summary>
            Retrieves the OpenedEmailInfo object for newsletter issue and subscriber identified by ID.
            </summary>
            <param name="issueId">ID of the newsletter issue</param>
            <param name="subscriberId">ID of the subscriber</param>
            <returns><see cref="T:CMS.Newsletter.OpenedEmailInfo"/> object</returns>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.GetOpenedEmails(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets a dataset with OpenedEmailInfo records that meet specified requirements.
            </summary>
            <param name="where">A filter for collection</param>
            <param name="orderby">Ordering expression</param>
            <param name="topN">Number of objects to retrieve</param>
            <param name="columns">An expression containing the columns to retrieve</param>        
            <returns>A <see cref="T:System.Data.DataSet"/> containing all opened e-mails</returns>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.GetSubscribersOpenedEmails(System.Int32)">
            <summary>
            Gets a dataset with OpenedEmailInfo records of a specified subscriber.
            </summary>
            <param name="subscriberId">ID of the subscriber</param>        
            <returns>A DataSet containing the OpenedEmailInfo records</returns>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.GetIssueOpeners(System.Int32)">
            <summary>
            Gets a dataset with OpenedEmailInfo records of a specified issue.
            </summary>
            <param name="issueId">Id of the issue</param>
            <returns>A DataSet containing the OpenedEmailInfo records</returns>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.SetOpenedEmailInfo(CMS.Newsletter.OpenedEmailInfo)">
            <summary>
            Saves the OpenedEmailInfo object.
            </summary>
            <param name="infoObj">An object to save</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.DeleteOpenedEmailInfo(System.Int32,System.Int32)">
            <summary>
            Deletes the OpenedEmailInfo object identified by the ID of issue and subscriber.
            </summary>
            <param name="issueId">ID of the newsletter issue</param>
            <param name="subscriberId">ID of the subscriber</param>        
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.DeleteOpenedEmailInfo(CMS.Newsletter.OpenedEmailInfo)">
            <summary>
            Deletes the OpenedEmailInfo object.
            </summary>
            <param name="infoObj">An object to delete</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.LogOpenedEmail(System.Int32,System.Int32)">
            <summary>
            Logs e-mail with newsletter issue as opened by specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="issueId">Newsletter issue ID</param>
            <returns>ID of the opened newsletter issue, 0 if not affected</returns>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.LogOpenedEmail(System.Guid,System.Guid,System.Int32)">
            <summary>
            Logs e-mail with newsletter issue as opened by specified subscriber.
            </summary>
            <param name="subscriberGuid">Subscriber's GUID</param>
            <param name="issueGuid">GUID of the newsletter issue</param>
            <param name="siteId">ID of the site that owns the newsletter</param>
            <returns>ID of the opened newsletter issue, 0 if not affected</returns>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.GetContactGroupOpens(System.Int32)">
            <summary>
            Returns number of e-mails opened by contact group members (each member is counted once).
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.DeleteOpenedEmailInfos(System.String)">
            <summary>
            Deletes OpenedEmailInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.GetOpenedEmailInfoInternal(System.Int32,System.Int32)">
            <summary>
            Retrieves the OpenedEmailInfo object for newsletter issue and subscriber identified by ID.
            </summary>
            <param name="issueId">ID of the newsletter issue</param>
            <param name="subscriberId">ID of the subscriber</param>
            <returns>OpenedEmailInfo object</returns>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.GetOpenedEmailsInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets a dataset with OpenedEmailInfo records that meet specified requirements.
            </summary>
            <param name="where">A filter for collection</param>
            <param name="orderby">Ordering expression</param>
            <param name="topN">Number of objects to retrieve</param>
            <param name="columns">An expression containing the columns to retrieve</param>
            <returns>A DataSet containing all opened e-mails</returns>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.SetOpenedEmailInfoInternal(CMS.Newsletter.OpenedEmailInfo)">
            <summary>
            Saves the OpenedEmailInfo object.
            </summary>
            <param name="infoObj">An object to save</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.DeleteOpenedEmailInfoInternal(System.Int32,System.Int32)">
            <summary>
            Deletes the OpenedEmailInfo object identified by the ID of issue and subscriber.
            </summary>
            <param name="issueId">ID of the newsletter issue</param>
            <param name="subscriberId">ID of the subscriber</param>        
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.DeleteOpenedEmailInfoInternal(CMS.Newsletter.OpenedEmailInfo)">
            <summary>
            Deletes the OpenedEmailInfo object.
            </summary>
            <param name="infoObj">An object to delete</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.LogOpenedEmailInternal(System.Int32,System.Int32)">
            <summary>
            Logs e-mail with newsletter issue as opened by specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="issueId">Newsletter issue ID</param>
            <returns>ID of the opened newsletter issue, 0 if not affected</returns>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.GetContactGroupOpensInternal(System.Int32)">
            <summary>
            Returns number of e-mails opened by contact group members (each member is counted once).
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.DeleteOpenedEmailInfosInternal(System.String)">
            <summary>
            Deletes OpenedEmailInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailInfoProvider.GetTrackingPage(System.String)">
            <summary>
            Returns a tracking page used for open-email tracking.
            </summary>
            <param name="domainName">Domain name</param>
            <returns>Absolute URL to tracking page</returns>
        </member>
        <member name="F:CMS.Newsletter.OpenedEmailListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailListInfo.#ctor">
            <summary>
            Constructor - Creates an empty OpenedEmailListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OpenedEmailListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletter.OpenedEmailListInfo.GetData(CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result (not applied)</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>       
        </member>
        <member name="T:CMS.Newsletter.OpenEmailTracker">
            <summary>
            Tracks subscribers who opened a newsletter issues sent by e-mail.
            </summary>
            <remarks>
            An e-mail containing a newsletter issue contains a link to image. 
            This link contains a subscriber's guid and the guid of the newsletter issue. 
            The image is sent in response and the request is logged.
            </remarks>
        </member>
        <member name="F:CMS.Newsletter.OpenEmailTracker.lockObj">
            <summary>
            Object for locking.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.OpenEmailTracker.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes the tracking data and serves a dummy image in response.
            </summary>
            <param name="context">An HttpContext associated with this request</param>
        </member>
        <member name="M:CMS.Newsletter.OpenEmailTracker.UseCached(System.Web.HttpRequest)">
            <summary>
            Checks if the same request for this image hasn't arrived in last 24 hours.
            </summary>
            <param name="request">An HttpRequest object</param>
            <returns>true if the same request was already received in last 24 hours, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletter.OpenEmailTracker.Log">
            <summary>
            Logs a request - extracts the subscriber and issue and counts the e-mail as opened.
            </summary>        
        </member>
        <member name="M:CMS.Newsletter.OpenEmailTracker.LogActivity(CMS.Newsletter.SubscriberInfo,CMS.Newsletter.IssueInfo,System.Int32)">
            <summary>
            Logs activity and returns subscriber's contact ID.
            </summary>
            <param name="subscriber">Subscriber</param>
            <param name="issue">Issue</param>
            <param name="contactId">Contact ID is present if the mail is sent to a contact or a contact group</param>
        </member>
        <member name="M:CMS.Newsletter.OpenEmailTracker.OnLog(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs custom handling &amp; logging after an email was logged.
            </summary>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="issueId">Newsletter issue's ID</param>
            <param name="siteId">ID of the site</param>
            <param name="contactId">Contact's ID</param>
        </member>
        <member name="P:CMS.Newsletter.OpenEmailTracker.Image">
            <summary>
            The tracking image that is sent in response.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.OpenEmailTracker.IsReusable">
            <summary>
            Gets whether this handler can be reused for other request; always returns true.
            </summary>
            <value>Always true /></value>
        </member>
        <member name="T:CMS.Newsletter.QueueSender">
            <summary>
            Scheduled task for newsletter issue mailout.
            </summary>    
        </member>
        <member name="F:CMS.Newsletter.QueueSender.generateLock">
            <summary>
            Lock object for issue variant generation to newsletter queue
            </summary>
        </member>
        <member name="M:CMS.Newsletter.QueueSender.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Generates e-mails of given issue (GUID or ID of an issue is specified in taskData property of task parameter) and send all emails in queue to subscribers.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="M:CMS.Newsletter.QueueSender.AllowGenerateQueue(System.Int32)">
            <summary>
            Returns if data can be generated into newsletter queue when a variant of A/B test is being sent.
            </summary>
            <param name="issueId">ID of parent issue</param>
        </member>
        <member name="M:CMS.Newsletter.QueueSender.IsQueueGenerated(System.Int32)">
            <summary>
            Returns if data are prepared in newsletter queue when a variant of A/B test is being sent.
            </summary>
            <param name="issueId">ID of parent issue</param>
        </member>
        <member name="M:CMS.Newsletter.QueueSender.CheckStatus(System.Int32,CMS.Newsletter.IssueStatusEnum)">
            <summary>
            Check if parent issue is in specified status.
            </summary>
            <param name="issueId">ID of parent issue</param>
            <param name="status">Status to be checked</param>
        </member>
        <member name="M:CMS.Newsletter.QueueSender.PostponeScheduledTask(CMS.Scheduler.TaskInfo)">
            <summary>
            Postpones given scheduled task for a minute.
            </summary>
            <param name="task">Scheduled task</param>
        </member>
        <member name="M:CMS.Newsletter.QueueSender.FinishWinnerVariant(System.Int32)">
            <summary>
            Ensures that winner variant's status is 'Finished'.
            </summary>
            <param name="issueId">ID of main issue</param>
        </member>
        <member name="T:CMS.Newsletter.SubscriberInfo">
            <summary>
            Subscriber data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberInfo.TYPEINFOUSER">
            <summary>
            Type information for user subscriber.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberInfo.TYPEINFOROLE">
            <summary>
            Type information for role subscriber.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberInfo.TYPEINFOCONTACTGROUP">
            <summary>
            Type information for contact group subscriber.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberInfo.TYPEINFOCONTACT">
            <summary>
            Type information for contact subscriber.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberInfo.mSubscriberCustomData">
            <summary>
            Subscriber custom data.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfo.InsertAsCloneInternal(CMS.SettingsProvider.CloneSettings,CMS.SettingsProvider.CloneResult,CMS.SettingsProvider.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfo.#ctor">
            <summary>
            Constructor - Creates an empty Subscriber object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfo.#ctor(CMS.DataEngine.IDataClass)">
            <summary>
            Constructor - Creates a new Subscriber object from the given Data class.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new Subscriber object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberInfo.CheckPermissions(CMS.SettingsProvider.PermissionsEnum,System.String,CMS.SettingsProvider.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberID">
            <summary>
            SubscriberID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberEmail">
            <summary>
            SubscriberEmail.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberFirstName">
            <summary>
            SubscriberFirstName.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberLastName">
            <summary>
            SubscriberLastName.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberFullName">
            <summary>
            SubscriberFullName.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberSiteID">
            <summary>
            SubscriberSiteID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberType">
            <summary>
            SubscriberType.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberRelatedID">
            <summary>
            SubscriberRelatedID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberCustomData">
            <summary>
            Susbcriber custom data.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberGUID">
            <summary>
            Subscriber GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.SubscriberBounces">
            <summary>
            Gets or sets the number of bounced e-mails for this subscriber.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberInfo.ObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.SubscriberLinkInfo">
            <summary>
            SubscriberLinkInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberLinkInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfo.#ctor">
            <summary>
            Creates a new SubscriberLinkInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new SubscriberLinkInfo object from the specified DataRow.
            </summary>
            <param name="SubscriberLinkInfoRow">Raw values from DB table that represent this object</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfo.#ctor(CMS.Newsletter.SubscriberLinkInfo,System.Boolean)">
            <summary>
            Creates a new SubscriberLinkInfo object from the existing SubscriberLinkInfo object.
            Copy constructor.
            </summary>
            <param name="subLinkInfo">Original object to copy</param>
            <param name="keepSourceData">If true, the copy is shallow, otherwise a deep copy is created (all object's data is cloned)</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfo.DeleteObject">
            <summary>
            Deletes this SubscriberLinkInfo object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfo.SetObject">
            <summary>
            Updates this SubscriberLinkInfo the object using appropriate provider.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberLinkInfo.LinkID">
            <summary>
            Gets or sets links's ID.
            </summary>
            <value>
            Links's ID, or 0 if not found.
            </value>        
        </member>
        <member name="P:CMS.Newsletter.SubscriberLinkInfo.SubscriberID">
            <summary>
            Gets or sets subscriber's ID.
            </summary>
            <value>
            Subscriber's ID, or 0 if not found.
            </value>        
        </member>
        <member name="P:CMS.Newsletter.SubscriberLinkInfo.Clicks">
            <summary>
            Gets the number of times this link was clicked by a subscriber.
            </summary>
            <value>
            Number of clicks by a specified subscriber or 0 if not applicable
            </value>
        </member>
        <member name="T:CMS.Newsletter.SubscriberLinkInfoProvider">
            <summary>
            Class providing SubscriberLinkInfoProvider management.
            </summary>
            <remarks>
            Handles basic CRUD functionality over SubscriberLinkInfo objects.
            </remarks>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.#ctor">
            <summary>
            Creates a new instance of SubscriberLinkInfoProvider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.CreateInfo(System.Data.DataRow)">
            <summary>
            Creates a new GeneralizedInfo object.
            </summary>
            <param name="dr">Data to use to create new object</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.GetSubscriberLinkInfo(System.Int32,System.Int32)">
            <summary>
            Retrieves the SubscriberLinkInfo object for newsletter link and subscriber identified by ID.
            </summary>
            <param name="linkId">ID of the newsletter link</param>        
            <param name="subscriberId">ID of the subscriber</param>        
            <returns><see cref="T:CMS.Newsletter.SubscriberLinkInfo"/> object</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.GetSubscriberLinks(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets a dataset with SubscriberLinkInfo records that meet specified requirements.
            </summary>
            <param name="where">A filter for collection</param>
            <param name="orderby">Ordering expression</param>
            <param name="topN">Number of objects to retrieve</param>
            <param name="columns">An expression containing the columns to retrieve</param>        
            <returns>A <see cref="T:System.Data.DataSet"/> containing all subscriber links</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.GetLinks(System.Int32)">
            <summary>
            Gets a dataset with SubscriberLinkInfo records of a specified subscriber.
            </summary>
            <param name="subscriberId">ID of the subscriber</param>        
            <returns>A DataSet containing the SubscriberLinkInfo records</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.GetSubscribers(System.Int32)">
            <summary>
            Gets a dataset with SubscriberLinkInfo records of a specified link.
            </summary>
            <param name="linkId">Id of the link</param>
            <returns>A DataSet containing the SubscriberLinkInfo records</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.SetSubscriberLinkInfo(CMS.Newsletter.SubscriberLinkInfo)">
            <summary>
            Saves the SubscriberLinkInfo object.
            </summary>
            <param name="infoObj">An object to save</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.DeleteSubscriberLinkInfo(System.Int32,System.Int32)">
            <summary>
            Deletes the SubscriberLinkInfo object identified by the ID of link and subscriber.
            </summary>
            <param name="linkId">ID of the newsletter link</param>
            <param name="subscriberId">ID of the subscriber</param>        
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.DeleteSubscriberLinkInfo(CMS.Newsletter.SubscriberLinkInfo)">
            <summary>
            Deletes the SubscriberLinkInfo object.
            </summary>
            <param name="infoObj">An object to delete</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.DeleteSubscriberLinkInfos(System.String)">
            <summary>
            Deletes SubscriberLinkInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.GetSubscriberLinkInfoInternal(System.Int32,System.Int32)">
            <summary>
            Retrieves the SubscriberLinkInfo object for newsletter link and subscriber identified by ID.
            </summary>
            <param name="linkId">ID of the newsletter link</param>
            <param name="subscriberId">ID of the subscriber</param>        
            <returns>SubscriberLinkInfo object</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.GetSubscriberLinksInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets a dataset with SubscriberLinkInfo records that meet specified requirements.
            </summary>
            <param name="where">A filter for collection</param>
            <param name="orderby">Ordering expression</param>
            <param name="topN">Number of objects to retrieve</param>
            <param name="columns">An expression containing the columns to retrieve</param>        
            <returns>A DataSet containing all subscriber links</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.SetSubscriberLinkInfoInternal(CMS.Newsletter.SubscriberLinkInfo)">
            <summary>
            Saves the SubscriberLinkInfo object.
            </summary>
            <param name="infoObj">An object to save</param>        
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.DeleteSubscriberLinkInfoInternal(CMS.Newsletter.SubscriberLinkInfo)">
            <summary>
            Deletes the SubscriberLinkInfo object.
            </summary>
            <param name="infoObj">An object to delete</param>        
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkInfoProvider.DeleteSubscriberLinkInfosInternal(System.String)">
            <summary>
            Deletes SubscriberLinkInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="T:CMS.Newsletter.SubscriberNewsletterInfo">
            <summary>
            SubscriberNewsletterInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberNewsletterInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfo.#ctor">
            <summary>
            Constructor - Creates an empty SubscriberNewsletterInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SubscriberNewsletterInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberNewsletterInfo.SubscribedWhen">
            <summary>
            Indicates when subscriber was subscribed to the newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberNewsletterInfo.NewsletterID">
            <summary>
            ID of the newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberNewsletterInfo.SubscriberID">
            <summary>
            ID of the Subscriber.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberNewsletterInfo.SubscriptionApproved">
            <summary>
            Indicaties if subscription is allowed.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberNewsletterInfo.SubscriptionApprovedWhen">
            <summary>
            Gets or sets when subscription was approved.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberNewsletterInfo.SubscriptionApprovalHash">
            <summary>
            Hash of subscription approval.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.SubscriberNewsletterInfo.SubscriptionEnabled">
            <summary>
            Indicates if the subscription is enabled. Default TRUE.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.SubscriberNewsletterInfoProvider">
            <summary>
            Class providing SubscriberNewsletterInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.GetSubscriberNewsletterInfo(System.Int32,System.Int32)">
            <summary>
            Returns the SubscriberNewsletterInfo structure for the specified subscriberNewsletter.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.GetSubscriberNewsletterInfo(System.String)">
            <summary>
            Returns the SubscriberNewsletterInfo structure for the specified subscriberNewsletter.
            </summary>
            <param name="subscriptionHash">Subscription hash.</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.GetSubscriberNewsletters(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Returns newsletters assigned to specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="orderBy">ORDER BY parameter</param>
            <param name="topN">TOP N parameter</param>
            <param name="columns">Selected columns</param>
            <returns>Returns dataset</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.GetSubscriptions(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns all existing subscriptions along with detailed information about the subscriber.
            </summary>
            <param name="where">WHERE parameter</param>
            <param name="orderBy">ORDER BY parameter</param>
            <param name="topN">TOP N parameter</param>
            <param name="columns">Selected columns</param>
            <returns>DataSet with subscriptions and their respective subscriber information</returns>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.SetSubscriberNewsletterInfo(CMS.Newsletter.SubscriberNewsletterInfo)">
            <summary>
            Sets (updates or inserts) specified subscriberNewsletter.
            </summary>
            <param name="subscriberNewsletter">SubscriberNewsletter to set</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.DeleteSubscriberNewsletterInfo(CMS.Newsletter.SubscriberNewsletterInfo)">
            <summary>
            Deletes specified subscriberNewsletter.
            </summary>
            <param name="infoObj">SubscriberNewsletter object</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.DeleteSubscriberNewsletterInfos(System.String)">
            <summary>
            Deletes SubscriberNewsletterInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.RemoveSubscriberFromNewsletter(System.Int32,System.Int32)">
            <summary>
            Deletes specified subscriberNewsletter.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.RemoveSubscriberFromNewsletter(System.String)">
            <summary>
            Deletes specified subscriberNewsletter.
            </summary>
            <param name="subscriptionApprovalHash">Subscription approval hash.</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.InvalidateSubscription(System.Int32,System.Int32)">
            <summary>
            Invalidates subscription which remains in the newsletter.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.RenewSubscription(System.Int32,System.Int32)">
            <summary>
            Renews subscription
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.InvalidateSubscription(CMS.Newsletter.SubscriberNewsletterInfo)">
            <summary>
            Invalidates subscription which remains in the newsletter.
            </summary>
            <param name="infoObj">Subscription object</param>>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.AddSubscriberToNewsletter(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Adds specified subscriber to the newsletter.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
            <param name="when">Date time</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.AddSubscriberToNewsletter(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Adds specified subscriber to the newsletter.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
            <param name="when">Indication when subscription was created</param>
            <param name="approved">Subscription is approved</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberNewsletterInfoProvider.GetSubscriptionsByType(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Returns DataSet with subscribers by type for specified issue(newsletter).
            </summary>
            <param name="subscriberType">Type of the subscriber</param>
            <param name="newsletterID">Newsletter ID representing</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N </param>
            <param name="columns">Columns</param>
            <returns>Returns DataSet.</returns>
        </member>
        <member name="T:CMS.Newsletter.ThreadEmailSender">
            <summary>
            Async e-mail sender.
            </summary>    
        </member>
        <member name="F:CMS.Newsletter.ThreadEmailSender.mSendFailed">
            <summary>
            Resend failed e-mails.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ThreadEmailSender.mSendNew">
            <summary>
            Send new e-mails.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ThreadEmailSender.mIssueID">
            <summary>
            Issue ID.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ThreadEmailSender.mSendingThreads">
            <summary>
            Threads currently sending e-mails.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ThreadEmailSender.mAppPath">
            <summary>
            Application path.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ThreadEmailSender.mWindowsIdentity">
            <summary>
            Windows identity.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ThreadEmailSender.mAllowSending">
            <summary>
            Used to cancel the sending if set to 'false'.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.ThreadEmailSender.threadLock">
            <summary>
            Thread lock for scheduled sending.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ThreadEmailSender.RunAsync(System.Security.Principal.WindowsIdentity)">
            <summary>
            Runs the sender in an asynchronous thread.
            </summary>
            <param name="wi">Windows identity</param>
        </member>
        <member name="M:CMS.Newsletter.ThreadEmailSender.Run">
            <summary>
            Sends all e-mails one by one in one thread.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ThreadEmailSender.CancelSending">
            <summary>
            Stops current sending process.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ThreadEmailSender.GetIssueIDToSend(System.Boolean,System.Boolean)">
            <summary>
            Returns IssueID of the top item in newsletter queue which is not A/B test or 0.
            </summary>
            <param name="getNew">Indicates if new issues can be used</param>
            <param name="getFailed">Indicates if failed issues can be used</param>
        </member>
        <member name="M:CMS.Newsletter.ThreadEmailSender.EnsureNewsletterObjects(CMS.Newsletter.IssueInfo@,CMS.Newsletter.NewsletterInfo@,CMS.Newsletter.EmailTemplateInfo@,System.String@,System.String@)">
            <summary>
            Ensures necessary newsletter objects.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter</param>
            <param name="template">Newsletter email template</param>
            <param name="siteName">Site name</param>
            <param name="domainName">Domain name</param>
        </member>
        <member name="M:CMS.Newsletter.ThreadEmailSender.ResolveCommonMacros(CMS.Newsletter.IssueInfo,CMS.Newsletter.NewsletterInfo,System.String,System.String)">
            <summary>
            Resolves newsletter and issue macros in the newsletter issue text and subject.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter</param>
            <param name="siteName">Site name</param>
            <param name="domainName">Domain name</param>
        </member>
        <member name="P:CMS.Newsletter.ThreadEmailSender.SendingThreads">
            <summary>
            Number of threads that are currently sending issues.
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ThreadEmailSender.SendFailed">
            <summary>
            Send failed e-mails?
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ThreadEmailSender.SendNew">
            <summary>
            Send new e-mails?
            </summary>
        </member>
        <member name="P:CMS.Newsletter.ThreadEmailSender.IssueID">
            <summary>
            IssueID, optional; only specific issue is send-out if it is set.
            </summary>
        </member>
        <member name="T:CMS.Newsletter.ThreadIssueEmailSender">
            <summary>
            Async e-mail sender used to deliver emails directly without subscription.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.ThreadIssueEmailSender.#ctor(System.String,System.String,System.String,CMS.Newsletter.NewsletterInfo,CMS.Newsletter.IssueInfo)">
            <summary>
            Creates a new instance of ThreadIssueEmailSender.
            </summary>
            <param name="recipients">Recipients delimited by semicolon</param>
            <param name="culture">Culture string</param>
            <param name="siteName">Site name</param>        
            <param name="newsletter">Newsletter</param>
            <param name="issue">Issue</param>
        </member>
        <member name="M:CMS.Newsletter.ThreadIssueEmailSender.Run">
            <summary>
            Sends emails to all recipients.
            </summary>
        </member>
        <member name="F:CMS.Newsletter.SubscriberLinkListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkListInfo.#ctor">
            <summary>
            Constructor - Creates an empty SubscriberLinkListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SubscriberLinkListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletter.SubscriberLinkListInfo.GetData(CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result (not applied)</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>       
        </member>
    </members>
</doc>
